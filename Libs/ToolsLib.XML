<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToolsLib</name>
    </assembly>
    <members>
        <member name="T:ToolsLib.FileService.WebServer">
            <summary>
            Web服务器中文件的相关操作
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.UpLoadFile(System.IO.Stream,System.String)">
            <summary>
            上传文件操作，流操作
            </summary>
            <param name="inputStream">要上传的文件流</param>
            <param name="sNewFileName">上传后的文件名称，文件物理地址 或者 虚拟地址。如果为虚拟地址则文件名为tempFile/Guid.Extension</param>
            <returns>上传后物理地址，默认虚拟地址为/tempFile/NewFileName</returns>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.UpLoadFile(System.Web.HttpPostedFile)">
            <summary>
            上传文件操作，流操作
            </summary>
            <param name="fileUtility"></param>
            <returns>上传后物理地址，默认虚拟地址为/tempFile/NewFileName</returns>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.UpLoadFile(System.Web.HttpPostedFile,System.String)">
            <summary>
            上传文件操作，流操作
            </summary>
            <param name="fileUtility"></param>
            <param name="sNewFileName">上传后的文件名称，文件物理地址 或者 无。如果为无则文件名为tempFile/Guid.Extension</param>
            <returns>上传后物理地址，默认虚拟地址为/tempFile/NewFileName</returns>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.DownLoadFile(System.String,System.Boolean)">
            <summary>
            下载服务器端文件
            </summary>
            <param name="sSourceFileName">服务器端文件物理地址</param>
            <param name="isDelete">下载后是否删除原文件</param>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.DownLoadFile(System.String,System.String,System.Boolean)">
            <summary>
            下载服务器端文件
            </summary>
            <param name="sSourceFileName">服务器端文件物理地址 或 者相对地址</param>
            <param name="sNewFileName">下载到客户端文件的新名字,含后缀</param>
            <param name="isDelete">下载后是否删除原文件</param>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.DownLoadFile(System.IO.Stream,System.String)">
            <summary>
            下载服务器端文件
            </summary>
            <param name="outputStream">文件流</param>
            <param name="newFileName">新文件名称，包括后缀</param>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.DownLoadWebControl(System.Web.UI.Control,System.String)">
            <summary>
            将数据以一定的文件格式导出到客户端，支持Excel文件，Word文件，Html文件，文本文件
            </summary>
            <param name="objControl">要导出的控件对象</param>
            <param name="sFileName">文件名，包括完整的后缀</param>
        </member>
        <member name="M:ToolsLib.FileService.WebServer.DownLoadWebControl(System.Web.UI.Control,System.String,System.Text.Encoding)">
            <summary>
            将数据以一定的文件格式导出到客户端，支持Excel文件，Word文件，Html文件，文本文件
            </summary>
            <param name="objControl">要导出的控件对象</param>
            <param name="sFileName">文件名，包括完整的后缀</param>
            <param name="enc">文件编码类型</param>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.SaveInfoToFile(System.Byte[],System.String)">
            <summary>
            将数据写入文件中，CreateNew模式写入
            </summary>
            <param name="b">字节数据</param>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.SaveInfoToFile(System.IO.Stream,System.String)">
            <summary>
            保存流到文件，CreateNew模式写入
            </summary>
            <param name="inputStream">输入流，写入文件后关闭流</param>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.SaveInfoToFile(System.String,System.String,System.Text.Encoding,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            将数据写入文件中，CreateNew模式写入
            </summary>
            <param name="inputStr">写入字符串</param>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
            <param name="enc"></param>
            <param name="mode"></param>
            <param name="access"></param>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.SaveInfoToFile(System.Text.StringBuilder,System.String,System.Text.Encoding,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            将数据写入文件中
            </summary>
            <param name="sb"></param>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
            <param name="enc"></param>
            <param name="mode"></param>
            <param name="access"></param>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.ReadFile(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            读取文本文件内容信息
            </summary>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
            <param name="encoding">编码类型</param>
            <param name="isDelete">读取后，是否删除文件</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.ReadFile(System.String,System.Boolean)">
            <summary>
            读取文本
            </summary>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
            <param name="isDelete">读取后，是否删除文件</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.ReadFile(System.String)">
            <summary>
            读取文件到内存流中
            </summary>
            <param name="sFileName">文件物理地址 或 者相对地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.NormalFile.DeleteFile(System.String)">
            <summary>
            删除服务器上的文件
            </summary>
            <param name="filePath">文件的物理路径</param>
        </member>
        <member name="T:ToolsLib.FileService.FileProvider">
            <summary>
            所有文件操作对象的提供者
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.FileProvider.ExcelFileInstance">
            <summary>
            Excel文件实例，对Excel文件的读、写操作
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.FileProvider.ImageFileInstance">
            <summary>
            图片文件的实例，图片的压缩等
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.FileProvider.WebServerInstance">
            <summary>
            Web服务器文件实例，文件的上传、下载操作
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.FileProvider.FileCompressInstance">
            <summary>
            文件压缩操作实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.FileProvider.NormalFileInstance">
            <summary>
            一般文件的读、写操作实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.ValidateCodeUtils">
            <summary>
            验证码操作类
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.ValidateCodeUtils.CreateValidateCodeImage">
            <summary>
            创建验证码数据，系统自动输出二进制数据
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.ValidateCodeUtils.CreateValidateCodeImage2">
            <summary>
            创建验证码数据，系统自动输出二进制数据
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.ValidateCodeUtils.IsTrueValidateCode(System.String)">
            <summary>
            验证用户输入的验证码是否正确
            </summary>
            <param name="validateCode">用户输入的验证码</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.ValidateCodeUtils.GetValidateCodeImage(System.Int32)">
            <summary>
            获取验证码图片字节数据
            </summary>
            <param name="imageType">1 or 2，代表不同的样式</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.myComparer`1">
            <summary>
            自定义比较器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ToolsLib.Utility.myComparer`1.#ctor(System.String)">
            <summary>
            对象比较
            </summary>
            <param name="propertyName">比较的对象属性</param>
        </member>
        <member name="M:ToolsLib.Utility.myComparer`1.#ctor(System.String,System.Object)">
            <summary>
            对象比较，两个属性值取绝对值后再比较
            </summary>
            <param name="propertyName">比较的对象属性</param>
            <param name="operaValue">数字类型，对比较的属性值加减操作，如：Math.Abs(X+Value).CompareTo(Math.Abs(Y+Value))</param>
        </member>
        <member name="M:ToolsLib.Utility.myComparer`1.Compare(`0,`0)">
            <summary>
            比较大小，支持CustomClass 和 Hashtable
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.myComparer`1.Equals(`0,`0)">
            <summary>
            比较是否相等，支持CustomClass 和 Hashtable
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.myComparer`1.GetHashCode(`0)">
            <summary>
            获取HashCode
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.IList2DataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            IList 转换成 DataTable类型，支持CustomClass 和 Hashtable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.DataTable2IList``1(System.Data.DataTable)">
            <summary>
            DataTable 转换成 IList类型，仅支持CustomClass
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns>转换失败返回null</returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.IList2Array``1(System.Collections.Generic.IList{``0})">
            <summary>
            将IList转换为T[].
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.IList2String(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            将IList转换为以splitter分隔的string.
            </summary>
            <param name="list"></param>
            <param name="splitter">默认为“,”</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.String2IList(System.String,System.Boolean,System.Char[])">
            <summary>
            将字符串转换为IList对象
            </summary>
            <param name="msg"></param>
            <param name="isContainNullOrEmpty">IList中是否包含NullOrEmpty项</param>
            <param name="splitter"></param>
            <returns>IList对象,转换失败返回null</returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.ArrayAppendToList``1(``0[],System.Int32,System.Int32,System.Collections.Generic.List{``0})">
            <summary>
            将Array里所有元素附加到List对象中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arr">Array元素</param>
            <param name="startIndex">起始位置</param>
            <param name="len"></param>
            <param name="collection">附加的目标对象</param>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.JsonSerialize(System.Object)">
            <summary>
            将object对象序列化为Json格式
            </summary>
            <param name="objModule"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.JsonDeserialize(System.String,System.Type)">
            <summary>
            将Json格式字符串反序列化为Object对象
            </summary>
            <param name="jsonStr"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.JsonSerialize2Xml(System.Xml.XmlNode)">
            <summary>
            将XmlNode对象序列化为Xml格式
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.BinarySerialize``1(``0)">
            <summary>
            二进制序列化对象.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.BinaryDeserialize``1(System.Byte[])">
            <summary>
            二进制数据反序列化.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.XmlSerialize``1(``0)">
            <summary>
            将对象序列化为Xml格式二进制数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model">对象</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.XmlSerialize``1(``0,System.Text.Encoding)">
            <summary>
            将对象序列化为Xml格式数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="model"></param>
            <param name="enc">将序列化的二进制数据转换为字符串</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.XmlDeserialize``1(System.Byte[])">
            <summary>
            将Xml格式数据反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data">字节</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.XmlDeserialize``1(System.IO.Stream)">
            <summary>
            将Xml格式数据反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.Eval(System.String)">
            <summary>
            计算字符串变量的表达式结果，到小数位
            </summary>
            <param name="formula">表达式string a = "(20*3-10/2.14)*1.73+3";</param>
            <returns>object对象，结果到小数位</returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.IsPhysicsPath(System.String)">
            <summary>
            是否物理路径。如果第二个字符是卷分隔符，则返回 true。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.GetPhysicsPath(System.String)">
            <summary>
            获取文件物理路径地址
            </summary>
            <param name="fileName">文件物理地址 或 者相对地址</param>
            <returns>物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.StartFileClear">
            <summary>
            启动删除文件定时器
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.CommonUtils.StopFileClear">
            <summary>
            关闭删除文件定时器
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.#ctor(System.String,System.Byte[],ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation)">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="buffer"></param>
            <param name="operationType"></param>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.DataMsg">
            <summary>
            Gets the data from the telnet session.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.DataBuffer">
            <summary>
            缓存的数据字节
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.OperationType">
            <summary>
            动作
            </summary>
        </member>
        <member name="T:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation">
            <summary>
            Socket异步操作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation.Connect">
            <summary>
            连接服务器动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation.Receive">
            <summary>
            接收数据动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation.Disconnected">
            <summary>
            关闭基础连接动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation.Send">
            <summary>
            发送命令动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetAsyncEventArgs.SocketAsyncOperation.Accept">
            <summary>
            开始接收Socket流
            </summary>
        </member>
        <member name="T:ToolsLib.Net.Telnet.State">
            <summary>
            State object for receiving data from remote device.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.State.BufferSize">
            <summary>
            Size of receive buffer.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.State.WorkSocket">
            <summary>
            Client socket.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.State.Buffer">
            <summary>
            Receive buffer.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.#ctor(ToolsLib.Net.SocketHelper.StateObject,System.String,ToolsLib.Net.SocketHelper.SocketAsyncOperation)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <param name="output"></param>
            <param name="operationType"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.#ctor(System.Net.Sockets.Socket,ToolsLib.Net.SocketHelper.StateObject,System.String,ToolsLib.Net.SocketHelper.SocketAsyncOperation)">
            <summary>
            
            </summary>
            <param name="workSocket">在服务器端监听时返回与客户端建立连接的Socket对象</param>
            <param name="state"></param>
            <param name="output"></param>
            <param name="operationType"></param>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.DataMsg">
            <summary>
            Socket所有操作的消息通知.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.WorkSocket">
            <summary>
            在服务器端监听时返回与客户端建立连接的Socket对象
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.DataBuffer">
            <summary>
            缓存的数据字节
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.SocketAsyncEventArgs.OperationType">
            <summary>
            动作
            </summary>
        </member>
        <member name="T:ToolsLib.Net.SocketHelper.SocketAsyncOperation">
            <summary>
            Socket异步操作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.Connect">
            <summary>
            连接服务器动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.Receiveing">
            <summary>
            正在进行数据接收动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.ReceiveComplete">
            <summary>
            完成所有数据接收
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.Disconnected">
            <summary>
            关闭基础连接动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.SendComplete">
            <summary>
            发送命令动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.Accept">
            <summary>
            开始接收Socket流
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.StopClientListen">
            <summary>
            停止客户端接收数据
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.SocketAsyncOperation.Error">
            <summary>
            服务器反馈超时或其它错误
            </summary>
        </member>
        <member name="T:ToolsLib.FileService.ImageFile">
            <summary>
            ImageFileProc 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.SaveSmallScalePic(System.String,System.String,System.Boolean)">
            <summary>
            保存小图片(20%大小)
            </summary>
            <param name="sSourcePhotoName">原图片物理地址</param>
            <param name="sNewPhotoName">新图片物理地址</param>
            <param name="isDeleteOld">是否删除原图片</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.SaveMiddleScalePic(System.String,System.String,System.Boolean)">
            <summary>
            保存中等大小的图片(45%大小)
            </summary>
            <param name="sSourcePhotoName">原图片物理地址</param>
            <param name="sNewPhotoName">新图片物理地址</param>
            <param name="isDeleteOld">是否删除原图片</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.SaveScalePic(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            不加水印保存图片信息
            </summary>
            <param name="iPercentage">新图片大小为原图片的百分比,整型</param>
            <param name="sSourcePhotoName"></param>
            <param name="sNewPhotoName"></param>
            <param name="isDeleteOld">是否删除原图片</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.SavePicWithWatermarkText(System.Int32,System.String,System.String,System.String,ToolsLib.LibConst.WatermarkPosition,System.Boolean)">
            <summary>
            添加文字水印到图片上
            </summary>
            <param name="iPercentage">新图片大小为原图片的百分比,整型</param>
            <param name="sSourcePhotoName"></param>
            <param name="sNewPhotoName"></param>
            <param name="watermarkText"></param>
            <param name="watermarkPosition"></param>
            <param name="isDeleteOld">是否删除原图片</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.SavePicWithWatermarkImage(System.Int32,System.String,System.String,System.String,ToolsLib.LibConst.WatermarkPosition,System.Boolean)">
            <summary>
            添加图片水印到新图片中
            </summary>
            <param name="iPercentage">新图片大小为原图片的百分比,整型</param>
            <param name="sSourcePhotoName"></param>
            <param name="sNewPhotoName"></param>
            <param name="watermarkImageUrl"></param>
            <param name="watermarkPosition"></param>
            <param name="isDeleteOld">是否删除原图片</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.addWatermarkText(System.Drawing.Graphics@,System.String,ToolsLib.LibConst.WatermarkPosition)">
            <summary>
            This method adds text as a watermark to the picture.
            </summary>
            <param name="picture">The picture being added to.</param>
            <param name="watermarkText">The picture being added to.</param>
            <param name="watermarkPosition">The picture being added to.</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.addWatermarkImage(System.Drawing.Graphics@,System.String,ToolsLib.LibConst.WatermarkPosition)">
            <summary>
            This method adds an image as a watermark to the picture.
            </summary>
            <param name="picture">The picture being added to.</param>
            <param name="waterImageUrl">The picture being </param>
            <param name="watermarkPosition">The picture being added to.</param>
        </member>
        <member name="M:ToolsLib.FileService.ImageFile.FormatConvert(System.String,System.String)">
            <summary>
            图片格式转换
            </summary>
            <param name="sourceImage">源图片物理路径地址 或 虚拟地址</param>
            <param name="toFormate">转换的格式后缀</param>
        </member>
        <member name="T:ToolsLib.EncryptService.RSA">
            <summary>
            非对称加密算法
            RAS。
            有效密钥大小（位）：364--16384，以8位递增
            默认密钥大小：1024位
            </summary>
        </member>
        <member name="T:ToolsLib.Configuration.OperateTrackerConfiguration">
            <summary>
            AuthConfiguration 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Configuration.OperateTrackerConfiguration.OnApplicationStart">
            <summary>
            启动配置结
            </summary>
        </member>
        <member name="T:ToolsLib.Data.XmlHelper">
            <summary>
            XML 操作基类
            </summary>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.GetXml(System.String)">
            <summary>
            功能:读取XML到DataSet中
            </summary>
            <param name="XmlPath">xml路径</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.ReadXmlReturnNode(System.String,System.String)">
            <summary>
            读取xml文档并返回一个节点:适用于一级节点
            </summary>
            <param name="XmlPath">xml路径</param>
            <param name="Node">节点</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.GetXmlData(System.String,System.String)">
            <summary>
            查找数据,返回当前节点的所有下级节点,填充到一个DataSet中
            </summary>
            <param name="xmlPath">xml文档路径</param>
            <param name="XmlPathNode">节点的路径:根节点/父节点/当前节点</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlNodeReplace(System.String,System.String,System.String)">
            <summary>
            更新Xml节点内容
            </summary>
            <param name="xmlPath">xml路径</param>
            <param name="Node">要更换内容的节点:节点路径 根节点/父节点/当前节点</param>
            <param name="Content">新的内容</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlNodeDelete(System.String,System.String)">
            <summary>
            删除XML节点和此节点下的子节点
            </summary>
            <param name="xmlPath">xml文档路径</param>
            <param name="Node">节点路径</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlInsertNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一个节点和此节点的字节点
            </summary>
            <param name="xmlPath">xml路径</param>
            <param name="MailNode">当前节点路径</param>
            <param name="ChildNode">新插入节点</param>
            <param name="Element">插入节点的子节点</param>
            <param name="Content">子节点的内容</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlInsertElement(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            插入一节点,带一属性
            </summary>
            <param name="xmlPath">Xml文档路径</param>
            <param name="MainNode">当前节点路径</param>
            <param name="Element">新节点</param>
            <param name="Attrib">属性名称</param>
            <param name="AttribContent">属性值</param>
            <param name="Content">新节点值</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreateXmlRoot(System.String)">
            <summary>
            创建一个只有声明和根节点的XML文档
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String)">
            <summary>
            在当前节点下插入一个空节点节点
            </summary>
            <param name="mainNode">当前节点路径</param>
            <param name="node">节点名称</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String,System.String)">
            <summary>
             在当前节点插入一个仅带值的节点
            </summary>
            <param name="mainNode">当前节点</param>
            <param name="node">新节点</param>
            <param name="content">新节点值</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String,System.String,System.String)">
            <summary>
            在当前节点的插入一个仅带属性值的节点
            </summary>
            <param name="MainNode">当前节点或路径</param>
            <param name="Node">新节点</param>
            <param name="Attrib">新节点属性名称</param>
            <param name="AttribValue">新节点属性值</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建一个带属性值的节点值的节点
            </summary>
            <param name="MainNode">当前节点或路径</param>
            <param name="Node">节点名称</param>
            <param name="Attrib">属性名称</param>
            <param name="AttribValue">属性值</param>
            <param name="Content">节点传情</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             在当前节点的插入一个仅带2个属性值的节点
            </summary>
            <param name="MainNode">当前节点或路径</param>
            <param name="Node">节点名称</param>
            <param name="Attrib">属性名称一</param>
            <param name="AttribValue">属性值一</param>
            <param name="Attrib2">属性名称二</param>
            <param name="AttribValue2">属性值二</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.CreatXmlNode(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             在当前节点插入带两个属性的节点
            </summary>
            <param name="MainNode">当前节点或路径</param>
            <param name="Node">节点名称</param>
            <param name="Attrib">属性名称一</param>
            <param name="AttribValue">属性值一</param>
            <param name="Attrib2">属性名称二</param>
            <param name="AttribValue2">属性值二</param>
            <param name="Content">节点值</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlSave(System.String)">
            <summary>
            保存Xml
            </summary>
            <param name="path">保存的当前路径</param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlSave(System.IO.Stream)">
            <summary>
            保存Xml
            </summary>
            <param name="outStream"></param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.XmlSave(System.Xml.XmlWriter)">
            <summary>
            保存Xml
            </summary>
            <param name="w"></param>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.LoadXmlFile">
            <summary>
            加载原有的Xml文件内容，便于附加节点到原文件中
            </summary>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.GetSubElementByAttribute(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            根据父节点属性读取字节点值
            </summary>
            <param name="XmlPath">xml路径</param>
            <param name="FatherElenetName">父节点名</param>
            <param name="AttributeName">属性值</param>
            <param name="AttributeIndex">属性索引</param>
            <param name="ArrayLength">要返回的节点数组长度</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.XmlHelper.GetSubElementByAttribute(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            根据节点属性读取子节点值(较省资源模式)
            </summary>
            <param name="XmlPath">xml路径</param>
            <param name="FatherElement">父节点值</param>
            <param name="AttributeName">属性名称</param>
            <param name="AttributeValue">属性值</param>
            <param name="ArrayLength">返回的数组长度</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.DBUtils">
            <summary>
            DBUitils 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.CreateDataTable(System.String[],System.String[])">
            <summary>
            创建一个两列的DataTable
            </summary>
            <param name="columnName">第一列值</param>
            <param name="columnValue">第二列值</param>
            <returns>DataTable对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetNewCatalogCode(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取表中新编码的值，通过IBatis获取
            </summary>
            <param name="parentCode">上级目录编码</param>
            <param name="tableName">表名</param>
            <param name="codeFieldName">编码值的字段名称</param>
            <param name="parentcodeFieldName">父编码值的字段名称</param>
            <param name="codeLen">编码长度</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetMaxValue(System.String,System.String)">
            <summary>
            返回表中某字段的最大值，通过IBatis获取
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <returns>查不到结果是，返回string.Empty</returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetMaxValue(System.String,System.String,System.String)">
            <summary>
            返回表中某字段的最大值，通过IBatis获取
            </summary>
            <param name="tableName">表名</param>
            <param name="fieldName">字段名</param>
            <param name="whereCondition">查询条件，不需要带where关键字</param>
            <returns>查不到结果是，返回string.Empty</returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetWholeTree(System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            获取某些节点的所有父节点、自己、子节点目录树
            </summary>
            <param name="codes">节点，用","分隔</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <param name="topCode">节点树中的顶级节点编码</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetWholeTree(System.Collections.Generic.IList{System.String},System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            获取某些节点的所有父节点、自己、子节点目录树
            </summary>
            <param name="codes">节点</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <param name="topCode">节点树中的顶级节点编码</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetChildrenTree(System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            获取所有子节点目录数据，不包括父节点自己
            </summary>
            <param name="codes">父节点，用","分隔</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetChildrenTree(System.Collections.Generic.IList{System.String},System.Data.DataTable,System.String,System.String)">
            <summary>
            获取所有子节点目录数据，不包括父节点自己
            </summary>
            <param name="codes">父节点</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetFatherTree(System.String,System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            获取所有父节点目录数据，包括节点自己
            </summary>
            <param name="codes">子节点，用","分隔</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <param name="topCode">节点树中的顶级节点编码</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.GetFatherTree(System.Collections.Generic.IList{System.String},System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            获取所有父节点目录数据，包括节点自己
            </summary>
            <param name="codes">子节点</param>
            <param name="allTree">整个节点目录</param>
            <param name="codeFieldName">DataTable中节点字段名称</param>
            <param name="parentcodeFieldName">DataTable中父节点字段名称</param>
            <param name="topCode">节点树中的顶级节点编码</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.AddColumn(System.Data.DataTable,System.String,System.String,System.String[])">
            <summary>
            在现有DataTable中新增一列，附加到最后列
            </summary>
            <param name="dt"></param>
            <param name="columnName">新增列名</param>
            <param name="columnValue">新增列值，可以格式化：{0}您好</param>
            <param name="formateFieldArgs">格式化的columnValue需要填充字段名称，这些字段为DataTable中的列名</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DBUtils.AddColumn(System.Data.DataTable,System.String,System.Int32,System.String,System.String[])">
            <summary>
            在现有DataTable中新增一列
            </summary>
            <param name="dt"></param>
            <param name="columnName">新增列名</param>
            <param name="columnIndex">新增列插入的索引号，从0开始计数</param>
            <param name="columnValue">新增列值，可以格式化：{0}您好</param>
            <param name="formateFieldArgs">格式化的columnValue需要填充字段名称，这些字段为DataTable中的列名</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Net.SocketHelper.CompletedEventHandler">
            <summary>
            完成某个动作的代理申明
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ToolsLib.Net.SocketHelper.baseSocket">
            <summary>
            Socket基类
            </summary>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.OnCompleted(ToolsLib.Net.SocketHelper.SocketAsyncEventArgs)">
            <summary>
            对基类定义的事件做封装，这样派生类就可以间接调用父类的事件
            事件（与字段不同）只能从声明它们的类中调用,派生类不能直接调用基类中声明的事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.isLinkOriented">
            <summary>
            当前是否面向连接的Socket
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            Socket当前是否处于连接状态
            </summary>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.SendDataAsync(System.Net.Sockets.Socket,System.String)">
            <summary>
            异步发送数据
            </summary>
            <param name="handler"></param>
            <param name="cmd"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.ReceiveDataSync(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            同步接收
            </summary>
            <param name="sk"></param>
            <param name="count">准备接收的字节数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.ReceiveDataSync(System.Net.Sockets.Socket)">
            <summary>
            同步接收
            </summary>
            <param name="sk"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.GetEndPoint(System.String,System.Int32)">
            <summary>
            获取EP
            </summary>
            <param name="hostName">服务器名或IP地址，为空时系统自动查找</param>
            <param name="port">端口号，为0时系统自动分配</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.baseSocket.CloseSocket">
            <summary>
            关闭基础连接
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.baseSocket.SendDataType">
            <summary>
            传入的数据格式为十六进制还是十进制
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.baseSocket.ReceiveByteCount">
            <summary>
            待接收消息的字节长度
            </summary>
        </member>
        <member name="E:ToolsLib.Net.SocketHelper.baseSocket.Completed">
            <summary>
            完成动作的事件定义
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.baseSocket.SendEncoding">
            <summary>
            发送数据的编码
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.baseSocket.ReceiveEncoding">
            <summary>
            接收数据的编码
            </summary>
        </member>
        <member name="P:ToolsLib.Net.SocketHelper.baseSocket.IsConneted">
            <summary>
            Socket当前是否处于连接状态
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.#ctor">
            <summary>
            实例化对象，默认停止位：StopBits.One，奇偶校验：None
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            实例化对象，默认停止位：StopBits.One，奇偶校验：None
            </summary>
            <param name="portName">设置通信端口</param>
            <param name="baudRate">设置串行波特率</param>
            <param name="dataBit">每个字节标准的数据位长度</param>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.GetInstance">
            <summary>
            单件模式实例化串口操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.StartListen">
            <summary>
            开始串口监听
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.StopListen">
            <summary>
            停止串口监听
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.SendData(System.String,ToolsLib.Net.Common.DataType)">
            <summary>
            开始通过串口发送数据
            </summary>
            <param name="data"></param>
            <param name="dataType"></param>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.SendData(System.Byte[])">
            <summary>
            串口发送数据
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.SendData(ToolsLib.Net.Serial.SerialClient.SendDataModel)">
            <summary>
            开始通过串口发送数据
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.ReceiveData(System.Int32)">
            <summary>
            接收串口报文字节
            </summary>
            <param name="count">准备接收的字节个数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.SendAndReceiveData(System.String,ToolsLib.Net.Common.DataType)">
            <summary>
            发送数据后等待接收（需要配合StartListen方法使用），同步模式
            </summary>
            <param name="data"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.SendAndReceiveData(System.Byte[])">
            <summary>
            发送数据后等待接收（需要配合StartListen方法使用），同步模式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.BegainRead(System.Object)">
            <summary>
            开始监听并读取串口数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.Close">
            <summary>
            关闭串口
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Serial.SerialClient.Open">
            <summary>
            打开串口，调用者不需要显示打开串口连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.EnableRTS">
            <summary>
            是否允许RTS
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.ReciveTimeSpan">
            <summary>
            发送数据后等待接收的最长时间，单位：毫秒
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.PortName">
            <summary>
            通信端口
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.BaudRate">
            <summary>
            串行波特率
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.DataBit">
            <summary>
            每个字节标准的数据位长度
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.SerialParity">
            <summary>
            奇偶校验协议
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.StopBit">
            <summary>
            每个字节的标准停止位数
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialClient.SerialEncoding">
            <summary>
            编码方式，默认Encoding.ASCII
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.TableName">
            <summary>
            要分页显示的表名
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.FieldKey">
            <summary>
            用于定位记录的主键(惟一键)字段,只能是单个字段
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.PageCurrent">
            <summary>
            要显示的页码
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.PageSize">
            <summary>
            每页的大小(记录数)
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.FieldShow">
            <summary>
            以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.FieldOrder">
            <summary>
            以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.Where">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:ToolsLib.IBatisNet.PagingModel.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.Update_SizeAndPosition">
            <summary>
            This Sub will run whenever Me.Refresh() is called. It applies the AutoSizing and DockSide settings.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.Update_VisibleLineNumberItems">
            <summary>
            This Sub determines which textlines are visible in the ParentRichTextBox, and makes LineNumberItems (LineNumber + ItemRectangle)
            for each visible line. They are put into the zLNIs List that will be used by the OnPaint event to draw the LineNumberItems. 
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.FindStartIndex(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            FindStartIndex is a recursive Sub (one that calls itself) to compute the first visible line that should have a LineNumber.
            </summary>
            <param name="zMin"> this will hold the eventual BestStartIndex when the Sub has completed its run.</param>
            <param name="zMax"></param>
            <param name="zTarget"></param>
            <remarks></remarks>
        </member>
        <member name="M:LineNumbers.LineNumbers_For_RichTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            OnPaint will go through the enabled elements (vertical ReminderMessage, GridLines, LineNumbers, BorderLines, MarginLines) and will
            draw them if enabled. At the same time, it will build GraphicsPaths for each of those elements (that are enabled), which will be used 
            in SeeThroughMode (if it's active): the figures in the GraphicsPaths will form a customized outline for the control by setting them as the 
            Region of the LineNumber control. Note: the vertical ReminderMessages are only drawn during designtime. 
            </summary>
            <param name="e"></param>
            <remarks></remarks>
        </member>
        <member name="P:ToolsLib.ReportService.ReportProvider.TableReportInstance">
            <summary>
            Table数字表格制作工具
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.ReportService.ReportProvider.ZedGraphReportInstance">
            <summary>
            生成图形化的图片报表，采用的是开源代码:ZedGraph V5.0.10.8624
            </summary>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.ReportService.ReportProvider.RichReportInstance">
            <summary>
            VML语言图形报表工具（仅仅支持IE）
            </summary>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Net.SocketHelper.SocketClient">
            <summary>
            客户端Socket
            </summary>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.ConnectSocket(System.String)">
            <summary>
            连接到远程服务器，默认端口：80
            </summary>
            <param name="hostName">远程主机名，远程端口默认80</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.ConnectSocket(System.String,System.Int32)">
            <summary>
            连接到远程服务器
            </summary>
            <param name="hostName">远程主机名</param>
            <param name="hostPort">远程端口</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.ConnectSocket(System.String,System.Int32,System.Int32)">
            <summary>
            连接到远程服务器
            </summary>
            <param name="hostName">远程主机名</param>
            <param name="hostPort">远程端口</param>
            <param name="localPort">本地端口</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SetReciveTimeOut(System.Int32)">
            <summary>
            等待服务器反馈最长时间，单位=毫秒
            </summary>
            <param name="millisecond"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendDataAsync(System.String)">
            <summary>
            异步发送命令
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendAndReceiveDataSync(System.String)">
            <summary>
            发送命令后同步接收
            </summary>
            <param name="cmd">字符串或者十六进制字符串，如果是十六进制时需要设置（SendDataType == Common.DataType.HexData）</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendAndReceiveDataSync(System.Byte[])">
            <summary>
            发送命令后同步接收
            </summary>
            <param name="sendData">二进制数组</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendAndReceiveDataSync(System.String,System.Int32)">
            <summary>
            发送命令后同步接收
            </summary>
            <param name="cmd">字符串或者十六进制字符串，如果是十六进制时需要设置（SendDataType == Common.DataType.HexData）</param>
            <param name="readCount">准备接收的字节数</param>
            <returns>接收到的所有字节</returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendAndReceiveDataSync(System.Byte[],System.Int32)">
            <summary>
            发送命令后同步接收
            </summary>
            <param name="sendData">二进制数组</param>
            <param name="readCount">准备接收的字节数</param>
            <returns>接收到的所有字节</returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendDataSync(System.String)">
            <summary>
            同步发送命令
            </summary>
            <param name="cmd">字符串或者十六进制字符串，如果是十六进制时需要设置（SendDataType == Common.DataType.HexData）</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.SendDataSync(System.Byte[])">
            <summary>
            同步发送命令
            </summary>
            <param name="data">命令数据</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.ReceiveDataSync">
            <summary>
            同步接收
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.ReceiveDataSync(System.Int32)">
            <summary>
            同步接收
            </summary>
            <param name="count">准备接收的字节数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.StartListen">
            <summary>
            客户端发送数据后开始接收服务器端返回数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketClient.StopListen">
            <summary>
            客户端停止接收服务器数据，Socket连接并不关闭
            </summary>
        </member>
        <member name="T:ToolsLib.Utility.StrUtils">
            <summary>
            StrUtils 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetUniqueFileName(System.String)">
            <summary>
            获取新文件名= 原文件名称_时间_6位随机数
            </summary>
            <param name="sFileName">文件名称或文件路径</param>
            <returns>String,新文件名称</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetRandomNumb(System.Int32)">
            <summary>
            获取0-9之间的随机数
            </summary>
            <param name="randNumblenght">要获取的随机数长度</param>
            <returns>String,随机数</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetRandomStr(System.Int32)">
            <summary>
            获取0-9a-zA-Z之间的随机数
            </summary>
            <param name="randNumblenght">要获取的随机数长度</param>
            <returns>String,随机数</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetRandom(System.String,System.Int32)">
            <summary>
            获取自定义的随机字符串
            </summary>
            <param name="sSeed">字符种子，随机数将从这里产生</param>
            <param name="iLen">要获取的随机数长度</param>
            <returns>String,随机数</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetRandom(System.String,System.Int32,System.Int32)">
            <summary>
            获取自定义的随机字符串
            </summary>
            <param name="sSeed">字符种子，随机数将从这里产生</param>
            <param name="randomSeed">随机种子</param>
            <param name="iLen">要获取的随机数长度</param>
            <returns>String,随机数</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetCharInString(System.String,System.Int32)">
            <summary>
            获取字符串中的某一个字符
            </summary>
            <param name="s">字符串</param>
            <param name="len">字符串中某个字符的位置，从0开始</param>
            <returns>字符串中某个字符</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.RemoveMsgInString(System.String@,System.String,System.Char[])">
            <summary>
            从字符串中去除某个字符串
            </summary>
            <param name="oldString">原字符信息</param>
            <param name="removeMsg">要去除某个字符串</param>
            <param name="splitChar">原字符中的分隔符</param>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.IsMsgInString(System.String,System.String,System.Char[])">
            <summary>
            查找某字符串中是否存在某个字符串
            </summary>
            <param name="oldString">原字符信息</param>
            <param name="chekMsg">要检查某个字符串</param>
            <param name="splitChar">原字符中的分隔符</param>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.IsMsgInString(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            查找某字符串中是否存在某个字符串
            </summary>
            <param name="msgList"></param>
            <param name="chekMsg">要检查某个字符串</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.DistinctMsg(System.String,System.Char[])">
            <summary>
            用某字符分割后的字符数组的值中去除重复的值
            </summary>
            <param name="msg"></param>
            <param name="splitChar"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.Encrypt(System.String,ToolsLib.LibConst.EncryptFormat)">
            <summary>
            字符串加密，目前只提供 MD5 和 SHA1 两种方式的加密
            </summary>
            <param name="str">要加密的字符串</param>
            <param name="sEncryptFormat">加密的类型，有MD5和SHA1两类加密型</param>
            <returns>加密后字符串，String</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetHTMLTags(System.String)">
            <summary>
            将字符中的的所有特殊标记为HTML Tags
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetHTMLNewLines(System.String)">
            <summary>
            将字符中的回车换行(\r\n)转换为HTML中的回车换行《br》
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetHTMLSpace(System.String)">
            <summary>
            将字符中的空格转换为HTML中的空格
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToString(System.Object,System.String)">
            <summary>
            将某个类型对象转换为String类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToInt32(System.Object,System.Int32)">
            <summary>
            将某个类型对象转换为Int类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToDouble(System.Object,System.Double)">
            <summary>
            将某个类型对象转换为Double类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToDate(System.Object,System.String)">
            <summary>
            将某个类型对象转换为Date类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将某个类型对象转换为DateTime类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToPercentage(System.Object,System.Int32)">
            <summary>
            将某个类型对象转换为百分比类型
            </summary>
            <param name="o"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将某个类型对象转换为Boolean类型
            </summary>
            <param name="o"></param>
            <param name="defaultBoolean"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToFloat(System.Object,System.Single)">
            <summary>
            将某个类型对象转换为Float类型
            </summary>
            <param name="o"></param>
            <param name="defaultFloat"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToBase64(System.String)">
            <summary>
            转换为Base64编码的字符串
            </summary>
            <param name="inputStr"></param>
            <returns>Base64编码的字符串</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.FromBase64(System.String)">
            <summary>
            将Base64编码的字符串还原为编码前的字符串
            </summary>
            <param name="inputBase64Str">Base64编码的字符串</param>
            <returns>错误的Base64编码将返回空字符串</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.DateToChar8(System.Object,System.String)">
            <summary>
            将时间格式转换为20090112类型
            </summary>
            <param name="o"></param>
            <param name="defaultvalue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetFileContentType(System.String)">
            <summary>
            通过文件后缀判断文件的类型.
            </summary>
            <param name="fileExtension">类似这样的格式（.aspx）</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.ToParserObject(System.Object)">
            <summary>
            解析对象，并返回组装后的字符串数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetObjecType(System.Type)">
            <summary>
            返回对象的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetObjecType(System.Object)">
            <summary>
            返回对象的类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.HexToBytes(System.String)">
            <summary>
            将十六进制字符串转换为字节数组
            </summary>
            <param name="hexStr">十六进制字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.HexToString(System.String,System.Text.Encoding)">
            <summary>
            将十六进制字符串解码为字符
            </summary>
            <param name="hex">十六进制字符串</param>
            <param name="enc">解码</param>
            <returns>字符</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.StringToHex(System.String,System.Text.Encoding)">
            <summary>
            将字符编码为十六进制字符串
            </summary>
            <param name="str">字符串</param>
            <param name="enc">解码</param>
            <returns>十六进制字符串</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.FilterForJsonData(System.String)">
            <summary>
            Json序列化之前对数据进行过滤
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetStringLength(System.String)">
            <summary>
            获取字符串长度，一个汉字算2个字符
            </summary>
            <param name="msg">字符串</param>
            <returns>返回字符串长度</returns>
        </member>
        <member name="M:ToolsLib.Utility.StrUtils.GetStrMaxLen(System.String,System.Int32)">
            <summary>
            获取不超过maxLen长度的字符串
            </summary>
            <param name="str"></param>
            <param name="maxLen">最大长度</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.CmdUtils">
            <summary>
            CmdUitils 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileSync(System.String)">
            <summary>
            同步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileSync(System.String,System.String)">
            <summary>
            同步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileSync(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
            同步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="style"></param>
            <param name="UseShellExecute"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileAsync(System.String)">
            <summary>
            异步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileAsync(System.String,System.String)">
            <summary>
            异步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileAsync(System.String,System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            异步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="style"></param>
        </member>
        <member name="M:ToolsLib.Utility.CmdUtils.RunExeFileAsync(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
            异步方式启动可执行文件
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="style"></param>
            <param name="UseShellExecute"></param>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.Common.ResponseStreamFilter">
            <summary>
            
            </summary>
        </member>
        <member name="E:ToolsLib.Https.HttpModules.Common.ResponseStreamFilter.OnRawDataRecordedEvent">
            <summary>
            当原始数据采集成功后激发。
            </summary>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.Common.RawDataEventArgs">
            <summary>
            定义原始数据EventArgs,便于在截获完整数据后，由事件传递数据
            </summary>
        </member>
        <member name="P:ToolsLib.Https.HttpModules.Common.RawDataEventArgs.ResponseContent">
            <summary>
            输出的Html内容
            </summary>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.AuthorizeModule">
            <summary>
            页面访问控制 HTTP 处理模块.
            </summary>
        </member>
        <member name="M:ToolsLib.Https.HttpModules.AuthorizeModule.isMustAuthPage(System.String)">
            <summary>
            当前请求页面是否需要权限验证
            </summary>
            <param name="requestUrl">当前请求页面地址的绝对路径</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Configuration.AuthConfiguration">
            <summary>
            AuthConfiguration 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Configuration.AuthConfiguration.OnApplicationStart">
            <summary>
            启动配置结
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.AuthConfiguration.Auth_Path">
            <summary>
            需要验证的页面路径，如果有多个请用,分割
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.AuthConfiguration.Auth_Errpage">
            <summary>
            验证不通过后显示的出错页面信息
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.AuthConfiguration.Auth_Ignorepage">
            <summary>
            需要忽略验证的页面路径，如果有多个请用,分割
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.AuthConfiguration.Auth_SessionName">
            <summary>
            服务器端存储用户拥有的权限点的Session名称
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.AuthConfiguration.Auth_IsMVC">
            <summary>
            是否为MVC编程框架模式
            </summary>
        </member>
        <member name="T:ToolsLib.Utility.DynamicLoadDll">
            <summary>
            使用方法：
            public delegate void WriteDataHandler(string com, int baudRate, int dataBits, string writeString);
            libAddress = DynamicLoadDll.LoadLibrary(WinUtils.LibsDir() + "\\"+Constants.ComWriteLib);
            DelegateCollection.WriteDataHandler write = DynamicLoadDll.GetFunctionAddress(libAddress, Constants.ComWriteFunction, typeof(DelegateCollection.WriteDataHandler)) as DelegateCollection.WriteDataHandler;
            write.Invoke(model.Com, model.baudRate, model.DataBit, model.DataMsg);
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.DynamicLoadDll.LoadLibrary(System.String)">
            <summary>
            加载动态链接库文件
            </summary>
            <param name="fileName">文件物理地址</param>
            <returns>库文件指针地址</returns>
        </member>
        <member name="M:ToolsLib.Utility.DynamicLoadDll.GetProcAddress(System.Int32,System.String)">
            <summary>
            获取库文件中某函数指针地址
            </summary>
            <param name="libPoint">库文件指针地址</param>
            <param name="funcName">函数名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DynamicLoadDll.FreeLibrary(System.Int32)">
            <summary>
            释放动态链接库文件
            </summary>
            <param name="libPoint">库文件指针地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.DynamicLoadDll.GetFunctionAddress(System.Int32,System.String,System.Type)">
            <summary>
            获取函数入口的指针地址
            </summary>
            <param name="libPoint">库文件指针地址</param>
            <param name="functionName">函数名称</param>
            <param name="t">委托类型</param>
            <returns>委托类型</returns>
        </member>
        <member name="T:ToolsLib.Net.Telnet.TelnetProtocolHandler">
            <summary>
            This is a telnet protocol handler. The handler needs implementations
            for several methods to handle the telnet options and to be able to
            read and write the buffer.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.IAC">
            <summary>
            IAC - init sequence for telnet negotiation.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.EOR">
            <summary>
            [IAC] End Of Record
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.WILL">
            <summary>
            [IAC] WILL
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.WONT">
            <summary>
            [IAC] WONT
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.DO">
            <summary>
            [IAC] DO
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.DONT">
            <summary>
            [IAC] DONT
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.SB">
            <summary>
            [IAC] Sub Begin
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.SE">
            <summary>
            [IAC] Sub End
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_BINARY">
            <summary>
            Telnet option: binary mode
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_ECHO">
            <summary>
            Telnet option: echo text
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_SGA">
            <summary>
            Telnet option: sga
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_EOR">
            <summary>
            Telnet option: End Of Record
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_NAWS">
            <summary>
            Telnet option: Negotiate About Window Size
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELOPT_TTYPE">
            <summary>
            Telnet option: Terminal Type
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.tempbuf">
            <summary>
            temporary buffer for data-telnetstuff-data transformation
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.crlf">
            <summary>
            the data sent on pressing [RETURN] \n
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.cr">
            <summary>
            the data sent on pressing [LineFeed] \r
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.terminalType">
            <summary>
            The current terminal type for TTYPE telnet option.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.windowSize">
            <summary>
            The window size of the terminal for the NAWS telnet option.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.SetLocalEcho(System.Boolean)">
            <summary>
            Set the local echo option of telnet.
            </summary>
            <param name="echo">true for local echo, false for no local echo</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.NotifyEndOfRecord">
            <summary>
            Generate an EOR (end of record) request. For use by prompt displaying.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.Write(System.Byte[])">
            <summary>
            Send data to the remote host.
            </summary>
            <param name="b">array of bytes to send</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.Write(System.Byte)">
            <summary>
            Send one byte to the remote host.
            </summary>
            <param name="b">the byte to be sent</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.Reset">
            <summary>
            Reset the protocol handler. This may be necessary after the
            connection was closed or some other problem occured.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.#ctor">
            <summary>
            Create a new telnet protocol handler.
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.neg_state">
            <summary>
            state variable for telnet negotiation reader
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.current_sb">
            <summary>
            What IAC SB we are handling right now
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELQUAL_IS">
            <summary>
            Telnet option qualifier 'IS'
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.TELQUAL_SEND">
            <summary>
            Telnet option qualifier 'SEND'
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.receivedDX">
            <summary>
            What IAC DO(NT) request do we have received already ?
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.receivedWX">
            <summary>
            What IAC WILL/WONT request do we have received already ?
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.sentDX">
            <summary>
            What IAC DO/DONT request do we have sent already ?
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Telnet.TelnetProtocolHandler.sentWX">
            <summary>
            What IAC WILL/WONT request do we have sent already ?
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.SendTelnetControl(System.Byte)">
            <summary>
            Send a Telnet Escape character
            </summary>
            <param name="code">IAC code</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.HandleSB(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Handle an incoming IAC SB type bytes IAC SE
            </summary>
            <param name="type">type of SB</param>
            <param name="sbdata">byte array as bytes</param>
            <param name="sbcount">nr of bytes. may be 0 too</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.Transpose(System.Byte[])">
            <summary>
            Transpose special telnet codes like 0xff or newlines to values
            that are compliant to the protocol. This method will also send
            the buffer immediately after transposing the data.
            </summary>
            <param name="buf">the data buffer to be sent</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.Negotiate(System.Byte[])">
            <summary>
            Handle telnet protocol negotiation. The buffer will be parsed
            and necessary actions are taken according to the telnet protocol.
            <see cref="!:RFC-Telnet"/>
            </summary>
            <param name="nbuf">the byte buffer used for negotiation</param>
            <returns>a new buffer after negotiation</returns>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetProtocolHandler.InputFeed(System.Byte[],System.Int32)">
            <summary>
            Adds bytes to the input buffer we'll parse for codes.
            </summary>
            <param name="b">Bytes array from which to add.</param>
            <param name="len">Number of bytes to add.</param>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetProtocolHandler.CRLF">
            <summary>
            Gets or sets the data sent on pressing [RETURN] \n
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetProtocolHandler.CR">
            <summary>
            Gets or sets the data sent on pressing [LineFeed] \r
            </summary>
        </member>
        <member name="T:ToolsLib.FileService.WebDAVFileServer">
            <summary>
            文件服务器的相关操作
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.#ctor(System.String,System.String,System.String)">
            <summary>
            文件服务器的操作
            </summary>
            <param name="url">服务器地址</param>
            <param name="userName">账号</param>
            <param name="password">密码</param>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.#ctor(System.String)">
            <summary>
            对文件服务器的匿名操作
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.UploadFile(System.String,System.String)">
            <summary>
            上传Web服务器中的文件到文件服务器中
            </summary>
            <param name="filePath">需要上传文件的物理路径</param>
            <param name="newFileName">上传到文件服务器中的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.UploadFile(System.IO.Stream,System.String)">
            <summary>
            上传文件流到文件服务器中，存在同名会自动覆盖
            </summary>
            <param name="inputStream"></param>
            <param name="filename">新文件名称,带后缀</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.DownLoadFile(System.String,System.String)">
            <summary>
            下载文件服务器中的文件，将此文件下载到Web服务器中
            </summary>
            <param name="sourceFileName">文件服务器中的文件名称</param>
            <param name="targetFileName">下载到Web服务器中物理地址 或 者相对地址</param>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.DownLoadFile(System.String)">
            <summary>
            下载文件服务器中的文件
            </summary>
            <param name="sourceFileName">文件服务器中的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.IsFileExist(System.String)">
            <summary>
            文件服务器中的文件是否存在
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.LockFile(System.String)">
            <summary>
            锁定文件
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.DeleteFile(System.String)">
            <summary>
            删除文件服务器中的目录或文件名
            </summary>
            <param name="dirOrfilename">目录或文件名</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.CreateDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.CopyFiles(System.String,System.String)">
            <summary>
            复制文件，当指定为目录时复制多个文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="targetFileName"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.WebDAVFileServer.MoveFiles(System.String,System.String)">
            <summary>
            移动文件，当指定为目录时复制多个文件
            </summary>
            <param name="sourceFileName"></param>
            <param name="targetFileName"></param>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.UserName">
            <summary>
            账户
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.Url">
            <summary>
            访问地址，例如：http://bughole:8088/uhrp/
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.IsAnonymous">
            <summary>
            是否匿名访问
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.WebDAVFileServer.LockToken">
            <summary>
            
            </summary>
        </member>
        <member name="T:ToolsLib.FileService.BarCodeType">
            <summary>
            条码类型
            </summary>
        </member>
        <member name="F:ToolsLib.FileService.BarCodeType.Code128C">
            <summary>
            必须为数字，并且长度必须是偶数
            </summary>
        </member>
        <member name="F:ToolsLib.FileService.BarCodeType.EAN128">
            <summary>
            必须为数字，并且长度必须是偶数
            </summary>
        </member>
        <member name="T:ToolsLib.FileService.BarCode">
            <summary>
            条码类库
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.BarCode.CreateBarCode(System.String,System.Boolean,ToolsLib.FileService.BarCodeType)">
            <summary>
            生成一个条码图片
            </summary>
            <param name="codeText">条码文字</param>
            <param name="isShowCodeText">条码下方是否显示文字信息</param>
            <param name="codeType">生成条码类别</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.BarCode.drawBarCode39(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="encodeText"></param>
            <param name="isShowCodeText">条码上端显示标题</param>
            <param name="g"></param>
        </member>
        <member name="M:ToolsLib.FileService.BarCode.getEncodeText128(ToolsLib.FileService.BarCodeType,System.String,System.Int32)">
            <summary>
            获取编码后的条码文本
            </summary>
            <param name="codeType">编码类型</param>
            <param name="codeText">条码文本</param>
            <param name="splitLen">条码文本每次分割长度</param>
            <returns>编码后的条码文本</returns>
        </member>
        <member name="M:ToolsLib.FileService.BarCode.getEncodeText128(System.Int32)">
            <summary>
            根据编号获得条纹
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.WidthCU">
            <summary>
            粗线和宽间隙宽度
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.WidthXI">
            <summary>
            细线和窄间隙宽度
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.PointX">
            <summary>
            条码起始X坐标
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.PointY">
            <summary>
            条码起始Y坐标
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.LineHeight">
            <summary>
            条码高度
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.CodeText">
            <summary>
            条码文本
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.cacheCode128">
            <summary>
            Code128编码参照表
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.cacheCode39">
            <summary>
            Code39编码参照表
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.BarCode.Magnify">
            <summary>
            放大倍数
            </summary>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ListenSync(System.Int32)">
            <summary>
            同步方式监听主机服务器，仅打开一个Socket请求并处理，完成则关闭当前链接
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ListenSync(System.String,System.Int32)">
            <summary>
            同步方式监听主机服务器，仅打开一个Socket请求并处理，完成则关闭当前链接
            </summary>
            <param name="hostName">监听服务器</param>
            <param name="port">监听端口</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.StartRunningSync(System.Object)">
            <summary>
            同步方式
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ListenAsync(System.Int32)">
            <summary>
            异步方式监听主机服务器，可同时打开N个Socket请求并处理
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ListenAsync(System.String,System.Int32)">
            <summary>
            异步方式监听主机服务器，可同时打开N个Socket请求并处理
            </summary>
            <param name="hostName">监听服务器</param>
            <param name="port">监听端口</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.StartRunningAsync(System.Object)">
            <summary>
            异步方式
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ReceiveUdpMessageSync">
            <summary>
            同步读取Udp数据报
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.SocketServer.ReceiveMessageFromCallBack(System.IAsyncResult)">
            <summary>
            异步接收数据的回调函数
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:ToolsLib.LibConst.Anchor">
            <summary>
            对齐方式
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.WatermarkType">
            <summary>
            This enum is used to define the type of watermark being used.
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkType.WM_TEXT">
            <summary>
            This enum is a text watermark
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkType.WM_IMAGE">
            <summary>
            This enum is an image watermark
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.WatermarkPosition">
            <summary>
            This enum is used to define the position of the watermark.
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkPosition.WM_TOP_LEFT">
            <summary>
            This enum is for the top left corner
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkPosition.WM_TOP_RIGHT">
            <summary>
            This enum is for the top right corner
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkPosition.WM_BOTTOM_RIGHT">
            <summary>
            This enum is for the bottom right corner
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.WatermarkPosition.WM_BOTTOM_LEFT">
            <summary>
            This enum is for the bottom left corner
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.DateType">
            <summary>
            日期时间类型
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.OperateType">
            <summary>
            操作类型
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.OperateType.Append">
            <summary>
            追加数据
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.OperateType.CreateNew">
            <summary>
            清空数据后再追加
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.CompressType">
            <summary>
            压缩格式类型
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.EncryptFormat">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.ObjectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.ObjectType.SimpleType">
            <summary>
            基础变量类型
            </summary>
        </member>
        <member name="F:ToolsLib.LibConst.ObjectType.CustomerClassType">
            <summary>
            用户自定义的对象
            </summary>
        </member>
        <member name="T:ToolsLib.LibConst.ExcelVersion">
            <summary>
            Excel版本
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.#ctor">
            <summary>
            default name of SqlMap.config in the application root directory
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.#ctor(System.String)">
            <summary>
            an absolute file path such as "file:\\c:\dir\a.config" or "~/abc.config"
            </summary>
            <param name="mapPath"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.Insert(System.String,System.Object)">
            <summary>
            插入指定 statementId、paramValue 的数据.
            </summary>
            <param name="statementId"></param>
            <param name="paramValue"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.Update(System.String,System.Object)">
            <summary>
            更新指定 statementId、paramValue 的数据.
            </summary>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.Delete(System.String,System.Object)">
            <summary>
            删除指定 statementId、paramValue 的数据.
            </summary>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectObject``1(System.String,System.Object)">
            <summary>
            根据 statementId、paramValue 获取对象T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectList``1(System.String)">
            <summary>
            根据 statementId 获取对象 T 列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectList``1(System.String,System.Object)">
            <summary>
            根据statementId、paramValue获取对象T列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            根据statementId、paramValue获取对象T列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <param name="skipResults">从0开始跳过的记录数</param>
            <param name="maxResults">最大记录数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectPaginatedList``1(System.String,System.Object)">
            <summary>
            数据库存储过程分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.SelectForDataTable``1(System.String,System.Object)">
            <summary>
            根据statementId、paramValue获取对象DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statementId"></param>
            <param name="paramValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseMapper.GetSql(System.String,System.Object)">
            <summary>
            获取执行的Sql脚本数据
            </summary>
            <param name="statementName"></param>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Data.SQLiteHelper">
            <summary>
            SQLiteHelper is a utility class similar to "SQLHelper" in MS
            Data Access Application Block and follows similar pattern.
            </summary>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.#ctor">
            <summary>
            Creates a new <see cref="T:ToolsLib.Data.SQLiteHelper"/> instance. The ctor is marked private since all members are static.
            </summary>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.CreateCommand(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.CreateCommand(System.String,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="parameterValue">Parameter value.</param>
            <returns>SQLiteParameter</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteDataSet(System.String,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of parameter values
            </summary>
            <param name="connectionString">SQLite Connection string</param>
            <param name="commandText">SQL Statement with embedded "@param" style parameter names</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteConnection,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of  parameter values
            </summary>
            <param name="cn">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Executes the dataset from a populated Command object.
            </summary>
            <param name="cmd">Fully populated SQLiteCommand</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteTransaction,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Executes the dataset in a SQLite Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction, 
            and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Sqlite Command parameters.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes the dataset with Transaction and object array of parameter values.
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,  
            and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">object[] array of parameter values.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.UpdateDataset(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid SQL statement  to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            ShortCut method to return IDataReader
            NOTE: You should explicitly close the Command.connection you passed in as
            well as call Dispose on the Command  after reader is closed.
            We do this because IDataReader has no underlying Connection Property.
            </summary>
            <param name="cmd">SQLiteCommand Object</param>
            <param name="commandText">SQL Statement with optional embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteNonQuery with SqlStatement and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">Sql Statement with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes  non-query sql Statment with Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction, 
            and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns>Integer</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmd">CMD.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteScalar with Sql Statement embedded params and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">SQL statment with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of param values</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute XmlReader with complete Command
            </summary>
            <param name="command">SQLite Command</param>
            <returns>XmlReader</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.DeriveParameters(System.String,System.Object[])">
             <summary>
             Parses parameter names from SQL Statement, assigns values from object array , 
             and returns fully populated ParameterCollection.
             </summary>
             <param name="commandText">Sql Statement with "@param" style embedded parameters</param>
             <param name="paramList">object[] array of parameter values</param>
             <returns>SQLiteParameterCollection</returns>
             <remarks>Status experimental. Regex appears to be handling most issues. Note that parameter object array must be in same 
            order as parameter names appear in SQL statement.</remarks>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Executes non query typed params from a DataRow
            </summary>
            <param name="command">Command.</param>
            <param name="dataRow">Data row.</param>
            <returns>Integer result code</returns>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the command's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:ToolsLib.Data.SQLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="T:ToolsLib.IBatisNet.DefaultMapper">
            <summary>
            默认从应用程序根目录加载SqlMap.config配置信息.
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.DefaultMapper.sqlmapPath">
            <summary>
            SqlMap.config文件物理地址
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.DefaultMapper.basemapper">
            <summary>
            IBatisNet 的 ISqlMapper 实例对象.
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultMapper.GetMapper">
            <summary>
            获取BaseMapper的实例化对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.SetPageSize(System.String,System.String,System.Boolean)">
            <summary>
            设置PDF文件页面大小
            </summary>
            <param name="pdfFile">需要设置PDF文件路径，虚拟路径 或者 物理路径</param>
            <param name="standardPdf">标准页面大小的模板PDF文件，虚拟路径 或者 物理路径</param>
            <param name="isDeleteSrcPdf">是否删除原Pdf文件</param>
            <returns>重置页面大小后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.SetPageSize(System.String,iTextSharp.text.Rectangle,System.Boolean)">
            <summary>
            设置PDF文件页面大小
            </summary>
            <param name="pdfFile">需要设置PDF文件路径，虚拟路径 或者 物理路径</param>
            <param name="pageSize"></param>
            <param name="isDeleteSrcPdf">是否删除原Pdf文件</param>
            <returns>重置页面大小后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.String,ToolsLib.LibConst.Anchor,ToolsLib.LibConst.Anchor,System.Single,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picFile">图片文件物理路径 或 虚拟路径</param>
            <param name="picX">图片X轴对齐方式</param>
            <param name="picY">图片Y轴对齐方式</param>
            <param name="scale">图片缩放倍数</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.String,System.Int32,System.Int32,ToolsLib.LibConst.Anchor,ToolsLib.LibConst.Anchor,System.Single,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picFile">图片文件物理路径 或 虚拟路径</param>
            <param name="startIndex">Pdf页面开始索引，从0开始</param>
            <param name="endIndex">Pdf页面结束索引，从0开始</param>
            <param name="picX">图片X轴对齐方式</param>
            <param name="picY">图片Y轴对齐方式</param>
            <param name="scale">图片缩放倍数</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.String,ToolsLib.LibConst.Anchor,System.Single,System.Single,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picFile">图片文件物理路径 或 虚拟路径</param>
            <param name="picX">图片X轴对齐方式</param>
            <param name="picTop">从左上角坐标(0,0)开始；-50：居中，-100：底部对齐</param>
            <param name="scale">图片缩放倍数</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.String,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picFile">图片文件物理路径 或 虚拟路径</param>
            <param name="pageNumber">插入图片到Pdf文件中的第N页，索引从0开始</param>
            <param name="picLeft">从左上角坐标(0,0)开始；-50：居中，-100：右对齐</param>
            <param name="picTop">从左上角坐标(0,0)开始；-50：居中，-100：底部对齐</param>
            <param name="scale">图片缩放倍数</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.String,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picFile">图片文件物理路径 或 虚拟路径</param>
            <param name="startIndex">Pdf页面开始索引，从0开始</param>
            <param name="endIndex">Pdf页面结束索引，从0开始</param>
            <param name="picLeft">从左上角坐标(0,0)开始；-50：居中，-100：右对齐</param>
            <param name="picTop">从左上角坐标(0,0)开始；-50：居中，-100：底部对齐</param>
            <param name="scale">图片缩放倍数</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,ToolsLib.FileService.PdfFile.PictureMode,System.Int32,System.Int32,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="picModel"></param>
            <param name="startIndex">Pdf页面开始索引，从0开始</param>
            <param name="endIndex">Pdf页面结束索引，从0开始</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.Collections.Generic.List{ToolsLib.FileService.PdfFile.PictureMode},System.Int32,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="pictureList">需要插入Pdf中的图片集合</param>
            <param name="pageNumber">插入图片到Pdf文件中的第N页，索引从0开始</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddPic(System.String,System.Collections.Generic.List{ToolsLib.FileService.PdfFile.PictureMode},System.Int32,System.Int32,System.Boolean)">
            <summary>
            插入图片到Pdf文件中
            </summary>
            <param name="srcPdfFile">Pdf文件物理路径 或 虚拟路径</param>
            <param name="pictureList"></param>
            <param name="startIndex">Pdf页面开始索引，从0开始</param>
            <param name="endIndex">Pdf页面结束索引，从0开始</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加图片后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.AddWatermarkText(System.String,System.String,System.Boolean)">
            <summary>
            添加普通偏转角度文字水印
            </summary>
            <param name="srcPdfFile">需要添加水印的Pdf文件，虚拟路径 或者 物理路径</param>
            <param name="watermarkText">水印文字</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>添加水印后的Pdf文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.MergePdf(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            合并PDF文件
            </summary>
            <param name="pdfList">待合并Pdf文件绝对路径地址</param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>合并后Pdf文件物理地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.SplitPdf(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            拆分PDF文件
            </summary>
            <param name="pdfFile">Pdf文件路径，虚拟路径 或者 物理路径</param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="isDeleteSrcPdf">删除原Pdf文件</param>
            <returns>拆分后Pdf文件物理地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.ExtractText(System.String)">
            <summary>
            提取Pdf文本内容
            </summary>
            <param name="pdfFile">Pdf文件地址，虚拟路径 或者 物理路径</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.EncryptPdf(System.String,System.Boolean)">
            <summary>
            PDF文件加密
            </summary>
            <param name="pdfFile">Pdf文件地址，虚拟路径 或者 物理路径</param>
            <param name="isDeleteSrcPdf"></param>
            <returns>加密后的PDF文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.EncryptPdf(System.String,System.String,System.String,System.Boolean)">
            <summary>
            PDF文件加密
            </summary>
            <param name="pdfFile">Pdf文件地址，虚拟路径 或者 物理路径</param>
            <param name="userPassword"></param>
            <param name="ownerPassword"></param>
            <param name="isDeleteSrcPdf"></param>
            <returns>加密后的PDF文件</returns>
        </member>
        <member name="M:ToolsLib.FileService.PdfFile.DecodePdf(System.String,System.String,System.Boolean)">
            <summary>
            PDF文件解密
            </summary>
            <param name="pdfFile">Pdf文件地址，虚拟路径 或者 物理路径</param>
            <param name="ownerPassword"></param>
            <param name="isDeleteSrcPdf"></param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.FileService.PdfFile.PictureMode">
            <summary>
            插入Pdf页面中的图片
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.PdfFile.PictureMode.PictureFilePath">
            <summary>
            图片路径，虚拟路径 或者 物理路径
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.PdfFile.PictureMode.LeftPostion">
            <summary>
            插入Pdf页面的左边距
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.PdfFile.PictureMode.TopPostion">
            <summary>
            插入Pdf页面的上边距
            </summary>
        </member>
        <member name="P:ToolsLib.FileService.PdfFile.PictureMode.Scale">
            <summary>
            缩放倍数
            </summary>
        </member>
        <member name="T:ToolsLib.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            Microsoft.ApplicationBlocks.Data(2.0)
            对连接字符串做了简单的包装，可以支持字符串加密
            </summary>
        </member>
        <member name="F:ToolsLib.Data.SqlHelper.connectionString">
            <summary>
            数据库连接字符串，可以支持字符串加密
            </summary>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],ToolsLib.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.UpdateDataset(System.String,System.Data.SqlClient.SqlParameter[],System.Data.DataSet)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset("spSaveXX", new SqlParameter[] {}, ds);
            </remarks>
            <param name="spName">a stored procedure name</param>
            <param name="parms">the params used by stored procedure</param>
            <param name="dataSet">The DataSet used to update the data source</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.UpdateDataset(System.String,System.Data.SqlClient.SqlParameter[],System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset("spSaveXX", new SqlParameter[] {}, ds, "tableName");
            </remarks>
            <param name="spName">a stored procedure name</param>
            <param name="parms">the params used by stored procedure</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">the name of the table to be updated</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@)">
            <summary>
            获取已分页列表，默认存储过程名称“spPageViewByStr”
            </summary>
            <param name="tableName">要分页显示的表(视图)名</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段</param>
            <param name="pageIndex">要显示的页码</param>
            <param name="pageSize">每页的大小(记录数)</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序</param>
            <param name="where">查询条件</param>
            <param name="recordCount">总记录数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@,System.String)">
            <summary>
            获取已分页列表，存储过程名称“spPageViewByStr”
            </summary>
            <param name="tableName">要分页显示的表(视图)名</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段</param>
            <param name="pageIndex">要显示的页码</param>
            <param name="pageSize">每页的大小(记录数)</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序</param>
            <param name="where">查询条件</param>
            <param name="recordCount">总记录数</param>
            <param name="procedureName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@,System.Int32)">
            <summary>
            获取已分页列表
            </summary>
            <param name="tableName">要分页显示的表(视图)名</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段</param>
            <param name="pageIndex">要显示的页码</param>
            <param name="pageSize">每页的大小(记录数)</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序</param>
            <param name="where">查询条件</param>
            <param name="recordCount">总记录数</param>
            <param name="commandTimeOut">等待的commandTimeOut时间</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:ToolsLib.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:ToolsLib.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:ToolsLib.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetSpParameterSet(System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:ToolsLib.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:ToolsLib.Net.Common.DataType">
            <summary>
            需要发送的数据类型
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Common.DataType.HexData">
            <summary>
            十六进制
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Common.DataType.StrData">
            <summary>
            字符串
            </summary>
        </member>
        <member name="T:ToolsLib.IBatisNet.DefaultDbHelper">
            <summary>
            IBatisNet的数据访问帮助类.
            主要用于不需要IBatisNet的映射的情况，如直接执行sql、返回DataSet等.
            仿MS的SqlHelper，主要不同点在于借助IBatisNet的DataSource/DbProvider来创建IDbConnection、IDbCommand、IDbDataAdapter、IDbDataParameter.
            而不是像SqlHelper一样通过SqlConnection、SqlCommand等来访问.
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.DefaultDbHelper.mapper">
            <summary>
            不能变更数据库
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.DefaultDbHelper.dbProvider">
            <summary>
            数据提供源.
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.DefaultDbHelper.ConnectionString">
            <summary>
            数据库连接字符串.
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.CreateConnection">
            <summary>
            创建数据库连接实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.CreateCommand">
            <summary>
            创建数据操作命令接口.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.CreateDataAdapter">
            <summary>
            创建数据适配器实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.CreateParameter">
            <summary>
            创建数据参数实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.CreateParameterSet(System.Int32)">
            <summary>
            创建数据参数集合.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.AttachParameters(System.Data.IDbCommand,System.Data.IDbDataParameter[])">
            <summary>
            附件参数对象到指定 IDbCommand 对象.
            </summary>
            <param name="command"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.AssignParameterValues(System.Data.IDbDataParameter[],System.Object[])">
            <summary>
            设置参数值.
            </summary>
            <param name="commandParameters"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[],System.Boolean@)">
            <summary>
            设置命令对象.
            </summary>
            <param name="command"></param>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <param name="mustCloseConnection"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
             执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
             执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteDataset(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteDataset(System.String,System.Object[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="spName"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.IDbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.FillDataset(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@)">
            <summary>
            获取已分页列表，存储过程名称“spPageViewByStr”
            </summary>
            <param name="tableName">要分页显示的表(视图)名.</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段.</param>
            <param name="pageIndex">要显示的页码，从1开始</param>
            <param name="pageSize">每页的大小(记录数).</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段.</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序.</param>
            <param name="where">查询条件.</param>
            <param name="recordCount">总记录数.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.DefaultDbHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@,System.String)">
            <summary>
            获取已分页列表.
            </summary>
            <param name="tableName">要分页显示的表(视图)名.</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段.</param>
            <param name="pageIndex">要显示的页码，从1开始</param>
            <param name="pageSize">每页的大小(记录数).</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段.</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序.</param>
            <param name="where">查询条件.</param>
            <param name="recordCount">总记录数.</param>
            <param name="procedureName">存储过程名称</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.WinUtils">
            <summary>
            Windows Form工具
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.BindListView``1(System.Windows.Forms.ListView,System.Collections.Generic.IList{``0})">
            <summary>
            自动绑定数据到ListView，需要设置Column的Tag属性。拥有自动递增的ID值
            </summary>
            <typeparam name="T">Model类</typeparam>
            <param name="lv">ListView对象</param>
            <param name="dataSource">数据源对象</param>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.BindListView(System.Windows.Forms.ListView,System.Data.DataTable)">
            <summary>
            自动绑定数据到ListView，需要设置Column的Tag属性。拥有自动递增的ID值
            </summary>
            <param name="lv">ListView对象</param>
            <param name="dataSource">数据源对象</param>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.GetSubForm``1(System.Windows.Forms.Form)">
            <summary>
            获取MDI窗体中的子窗体对象并设为焦点，没有就新建；子窗体自动最大化、隐藏ControlBox
            </summary>
            <typeparam name="T">子窗体类</typeparam>
            <param name="mainForm">主窗体对象</param>
            <returns>子窗体对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.AddUserControl``1(System.Object,System.Windows.Forms.DockStyle,System.Int32)">
            <summary>
            添加用户控件
            </summary>
            <typeparam name="T">用户控件类名</typeparam>
            <param name="container">用户控件容器对象</param>
            <param name="dock"></param>
            <param name="width"></param>
            <returns>用户控件实例化的对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.AddUserControl``1(System.Object,System.Windows.Forms.DockStyle)">
            <summary>
            添加用户控件
            </summary>
            <typeparam name="T">用户控件类名</typeparam>
            <param name="container">用户控件容器对象</param>
            <param name="dock"></param>
            <returns>用户控件实例化的对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.AddUserControl``1(System.Object,System.Windows.Forms.DockStyle,System.Windows.Forms.AnchorStyles)">
            <summary>
            添加用户控件
            </summary>
            <typeparam name="T">用户控件类名</typeparam>
            <param name="container">用户控件容器对象</param>
            <param name="dock"></param>
            <param name="anchor"></param>
            <returns>用户控件实例化的对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.AddUserControl``1(System.Object,System.Windows.Forms.DockStyle,System.Windows.Forms.AnchorStyles,System.Int32,System.Int32)">
            <summary>
            添加用户控件
            </summary>
            <typeparam name="T">用户控件类名</typeparam>
            <param name="container">用户控件容器对象</param>
            <param name="dock"></param>
            <param name="anchor"></param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns>用户控件实例化的对象</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.SetCheckBoxCell(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            通用控件内CheckBox状态
            </summary>
            <param name="controlContainer"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.GetRunningDir(System.String)">
            <summary>
            获取程序运行的根目录，结尾不带【\】
            </summary>
            <param name="dir">目录地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.ClickCheckBoxCell(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
            点击DataGridView中的CheckBox时改变选中状态
            </summary>
            <param name="gv"></param>
            <param name="rowIndex"></param>
            <param name="columnIndex">CheckBoxCell的列索引号</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.SetCheckBoxCell(System.Windows.Forms.DataGridView,System.Boolean,System.Int32)">
            <summary>
            设置DataGridView中的CheckBox状态
            </summary>
            <param name="gv"></param>
            <param name="isChecked"></param>
            <param name="columnIndex">CheckBoxCell的列索引号</param>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.SetCheckBoxCell(System.Windows.Forms.DataGridViewRow,System.Boolean,System.Int32)">
            <summary>
            设置DataGridView中某行的CheckBox状态
            </summary>
            <param name="row"></param>
            <param name="isChecked"></param>
            <param name="columnIndex">CheckBoxCell的列索引号</param>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.GetCheckedBoxDataBoundItem(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
            获取DataGridView中的CheckBox状态为True的DataBoundItem集合
            </summary>
            <param name="gv"></param>
            <param name="columnIndex">CheckBoxCell的列索引号</param>
            <returns>DataBoundItem集合</returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.GetHostIP">
            <summary>
            获取主机IP地址列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WinUtils.GetHostIP4One">
            <summary>
            获取主机IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Utility.Jquery.DataTableUtils">
            <summary>
            针对Jquery dataTables插件的帮助工具
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.Jquery.DataTableUtils.GetJquerydataTableParams">
            <summary>
            提取Jquery dataTable插件传值，并实例化包含这些参数的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.Jquery.DataTableUtils.GetServerJsonData(System.Data.DataTable,ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel)">
            <summary>
            将数据源转换为Jquery dataTable需要的格式：{"sEcho":3,"iTotalRecords":1000,"iTotalDisplayRecords":25,"aaData":[["aa","bb"],["cc","dd"]]}
            </summary>
            <param name="dt">数据源</param>
            <param name="model"></param>
            <returns>Json格式数据</returns>
        </member>
        <member name="M:ToolsLib.Utility.Jquery.DataTableUtils.GetServerJsonData(System.Data.DataTable,System.Int32)">
            <summary>
            将数据源转换为Jquery dataTable需要的格式：{"sEcho":3,"iTotalRecords":1000,"iTotalDisplayRecords":25,"aaData":[["aa","bb"],["cc","dd"]]}
            </summary>
            <param name="dt">数据源</param>
            <param name="totalRecord">记录总数</param>
            <returns>Json格式数据</returns>
        </member>
        <member name="M:ToolsLib.Utility.Jquery.DataTableUtils.GetServerJsonData``1(System.Collections.Generic.IList{``0},ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel)">
            <summary>
            将数据源转换为Jquery dataTable需要的格式：{"sEcho":3,"iTotalRecords":1000,"iTotalDisplayRecords":25,"aaData":[["aa","bb"],["cc","dd"]]}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">数据源</param>
            <param name="model"></param>
            <returns>Json格式数据</returns>
        </member>
        <member name="M:ToolsLib.Utility.Jquery.DataTableUtils.GetServerJsonData``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            将数据源转换为Jquery dataTable需要的格式：{"sEcho":3,"iTotalRecords":1000,"iTotalDisplayRecords":25,"aaData":[["aa","bb"],["cc","dd"]]}
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">展示数据源</param>
            <param name="totalRecord">记录总数</param>
            <returns>Json格式数据</returns>
        </member>
        <member name="T:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.sEcho">
            <summary>
            来自客户端 sEcho 的没有变化的复制
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.iTotalRecords">
            <summary>
            实际的行数
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.iTotalDisplayRecords">
            <summary>
            过滤之后，实际的行数
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.aaData">
            <summary>
            数组的数组，表格中的实际数据
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.KeyWord">
            <summary>
            搜索框中关键字
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.PageSize">
            <summary>
            页面显示记录数
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.PageIndex">
            <summary>
            当前页面索引号
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.RecordStart">
            <summary>
            记录开始序号
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.FieldOrder">
            <summary>
            字段排列顺序（Order By）
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.FieldCondition">
            <summary>
            高级查询查询条件（Where），无查询条件返回空
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.SearchableFields">
            <summary>
            dataTable中设置可以搜索的字段，用","隔开
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.Jquery.DataTableUtils.DataTableModel.SelectFields">
            <summary>
            数据库表中查询字段，用","隔开
            </summary>
        </member>
        <member name="T:ToolsLib.Utility.HtmlHelperExtensions">
            <summary>
            自定义HtmlHelper扩展
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.RadioButtonList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Int32)">
            <summary>
            Radio列表
            </summary>
            <param name="helper"></param>
            <param name="name">Radio名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="countPerRow">每行Radio个数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.RadioButtonList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            Radio列表
            </summary>
            <param name="helper"></param>
            <param name="name">Radio名称，ID=name_Value</param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.RadioButtonList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
            <summary>
            Radio列表
            </summary>
            <param name="helper"></param>
            <param name="name">Radio名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.RadioButtonList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object,System.Int32)">
            <summary>
            Radio列表
            </summary>
            <param name="helper"></param>
            <param name="name">Radio名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="htmlAttributes"></param>
            <param name="countPerRow">每行Radio个数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.CheckBoxList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Int32)">
            <summary>
            加载Checkbox数据列表
            </summary>
            <param name="helper"></param>
            <param name="name">Checkbox名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="countPerRow">每行Checkbox个数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.CheckBoxList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
            <summary>
            加载Checkbox数据列表
            </summary>
            <param name="helper"></param>
            <param name="name">Checkbox名称，ID=name_Value</param>
            <param name="selectList"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.CheckBoxList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
            <summary>
            加载Checkbox数据列表
            </summary>
            <param name="helper"></param>
            <param name="name">Checkbox名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.CheckBoxList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object,System.Int32)">
            <summary>
            加载Checkbox数据列表
            </summary>
            <param name="helper"></param>
            <param name="name">Checkbox名称，ID=name_Value</param>
            <param name="selectList"></param>
            <param name="htmlAttributes"></param>
            <param name="countPerRow">每行Checkbox个数</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.DropDownListTree``1(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IList{``0},System.String,System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            树形下拉框
            </summary>
            <typeparam name="T">目前仅支持CustomClass</typeparam>
            <param name="helper"></param>
            <param name="name">name和id</param>
            <param name="dataSource"></param>
            <param name="dataValueField">option标签中显示value的字段名</param>
            <param name="dataTextField">option标签中显示text的字段名</param>
            <param name="selectedValue">被选中的option值</param>
            <param name="dataCodeField">当前记录编号字段名</param>
            <param name="dataParentCodeField">上级编号字段名</param>
            <param name="topTreeValue">树形下拉框根节点值</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.HtmlHelperExtensions.DropDownListTree``1(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IList{``0},System.String,System.String,System.Object,System.String,System.String,System.String,System.Object)">
            <summary>
            树形下拉框
            </summary>
            <typeparam name="T">目前仅支持CustomClass</typeparam>
            <param name="helper"></param>
            <param name="name">name和id</param>
            <param name="dataSource"></param>
            <param name="dataValueField">option标签中显示value的字段名</param>
            <param name="dataTextField">option标签中显示text的字段名</param>
            <param name="selectedValue">被选中的option值</param>
            <param name="dataCodeField">当前记录编号字段名</param>
            <param name="dataParentCodeField">上级编号字段名</param>
            <param name="topTreeValue">树形下拉框根节点值</param>
            <param name="htmlAttributes"></param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.RequestTracker.TxtLog">
            <summary>
            TxtLog 的摘要说明。
            </summary>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.RequestTracker.ILog">
            <summary>
            ILog 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Https.HttpModules.RequestTracker.ILog.SaveLogs(ToolsLib.Https.HttpModules.RequestTracker.RequestModel)">
            <summary>
            保存日志到缓存中
            </summary>
            <param name="requestCollection"></param>
        </member>
        <member name="M:ToolsLib.Https.HttpModules.RequestTracker.ILog.Flash">
            <summary>
            批量写入日志，并重置缓存
            </summary>
        </member>
        <member name="T:ToolsLib.ReportService.ZedGraphReport">
            <summary>
            生成图形化的图片报表，采用的是开源代码:ZedGraph V5.0.10.8624
            </summary>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateLineChart(ZedGraph.GraphPane,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            创建曲线图
            </summary>
            <param name="myPane"></param>
            <param name="title"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="xField"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateLineChart_DateXAxisType(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String,System.String)">
            <summary>
            创建曲线图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="xField"></param>
            <param name="format"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateLineChart(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String,ZedGraph.AxisType,System.String)">
            <summary>
            创建曲线图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="xField"></param>
            <param name="axisType"></param>
            <param name="format"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateLineChart_TextXAxisType(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String[])">
            <summary>
            创建曲线图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="labels"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateY2LineChart_DateXAxisType(ZedGraph.GraphPane,System.Data.DataTable,System.String,System.String[],System.String[])">
            <summary>
            创建使用第二条y轴的曲线图
            </summary>
            <param name="myPane"></param>
            <param name="dt"></param>
            <param name="xField"></param>
            <param name="y2Titles"></param>
            <param name="y2Fields"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateY2LineChart_TextXAxisType(ZedGraph.GraphPane,System.Data.DataTable,System.String[],System.String[])">
            <summary>
            创建使用第二条y轴的曲线图
            </summary>
            <param name="myPane"></param>
            <param name="dt"></param>
            <param name="y2Titles"></param>
            <param name="y2Fields"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateY2LineChart(ZedGraph.GraphPane,System.Data.DataTable,System.String,System.String[],System.String[])">
            <summary>
            创建使用第二条y轴的曲线图
            </summary>
            <param name="myPane"></param>
            <param name="dt"></param>
            <param name="xField"></param>
            <param name="y2Titles"></param>
            <param name="y2Fields"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateBarChart(ZedGraph.GraphPane,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            创建柱状图
            </summary>
            <param name="myPane"></param>
            <param name="title"></param>
            <param name="dt"></param>
            <param name="yField"></param>
            <param name="xField"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateBarChart_DateXAxisType(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String,System.String)">
            <summary>
            创建柱状图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="xField"></param>
            <param name="format"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateBarChart(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String,ZedGraph.AxisType,System.String)">
            <summary>
            创建柱状图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="xField"></param>
            <param name="axisType"></param>
            <param name="format"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreateBarChart_TextXAxisType(ZedGraph.GraphPane,System.String[],System.Data.DataTable,System.String[],System.String[])">
            <summary>
            创建柱状图
            </summary>
            <param name="myPane"></param>
            <param name="titles"></param>
            <param name="dt"></param>
            <param name="yFields"></param>
            <param name="labels"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreatePieChart(ZedGraph.GraphPane,System.String,System.Data.DataRow,System.String[],System.String[])">
            <summary>
            创建饼图
            </summary>
            <param name="myPane"></param>
            <param name="title"></param>
            <param name="dr"></param>
            <param name="fieldNames"></param>
            <param name="labels"></param>
        </member>
        <member name="M:ToolsLib.ReportService.ZedGraphReport.CreatePieChart(ZedGraph.GraphPane,System.String,System.Data.DataTable,System.String,System.String)">
            <summary>
            创建饼图
            </summary>
            <param name="myPane"></param>
            <param name="title"></param>
            <param name="dt"></param>
            <param name="dataField"></param>
            <param name="labelField"></param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.Utils.SendUDPData(System.Net.Sockets.Socket,System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送Socket数据
            </summary>
            <param name="sk"></param>
            <param name="remoteEP"></param>
            <param name="sendData">发送的数据</param>
            <param name="spliteLen">数据包拆分长度</param>
            <param name="intervalTime">数据包发送的时间间隔</param>
        </member>
        <member name="M:ToolsLib.Net.SocketHelper.Utils.SendUDPData(System.Net.Sockets.Socket,System.Net.EndPoint,System.Collections.Generic.List{System.Byte},System.Int32,System.Int32)">
            <summary>
            发送Socket数据
            </summary>
            <param name="sk"></param>
            <param name="remoteEP"></param>
            <param name="sendData">发送的数据</param>
            <param name="spliteLen">数据包拆分长度</param>
            <param name="intervalTime">数据包发送的时间间隔</param>
        </member>
        <member name="F:ToolsLib.Https.HttpModules.OperateTracker.ILog.cache">
            <summary>
            写入数据的缓存中心
            </summary>
        </member>
        <member name="T:ToolsLib.Https.HttpHandlers.FileStream.ValidateCodeHandler">
            <summary>
            生成验证码，可以通过参数imagetype=1 or 2调节图片样式
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.FileClearConfiguration.FileClear_Path">
            <summary>
            需要删除的文件路径，如果有多个请用,分割
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.FileClearConfiguration.FileClear_TimerSpan">
            <summary>
            删除文件定时器执行时间间隔，单位：分钟
            </summary>
        </member>
        <member name="P:ToolsLib.Configuration.FileClearConfiguration.FileClear_Condition4CreateDate">
            <summary>
            删除文件条件：文件创建时间超过设定值，单位：分钟
            </summary>
        </member>
        <member name="T:ToolsLib.Resource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:ToolsLib.Resource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:ToolsLib.Resource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="T:ToolsLib.Net.Telnet.TelnetClient">
            <summary>
            TelnetClient is a sample class demonstrating the use of the 
            telnet protocol handler.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.Connect">
            <summary>
            Connects to the remote host  and opens the connection.
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.Connect(System.String,System.Int32)">
            <summary>
            Connects to the specified remote host on the specified port
            and opens the connection.
            </summary>
            <param name="host">Hostname of the Telnet server.</param>
            <param name="port">The Telnet port on the remote host.</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.SendAsync(System.String)">
            <summary>
            Sends a command to the remote host. A newline is appended.
            </summary>
            <param name="cmd">the command</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.ReceiveAsync">
            <summary>
            异步接收数据
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.Disconnect(System.String)">
            <summary>
            Disconnects the socket and closes the connection
            </summary>
            <param name="errMsg"></param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.Write(System.Byte[])">
            <summary>
            Writes data to the socket.
            </summary>
            <param name="b">the buffer to be written</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.ConnectCallback(System.IAsyncResult)">
            <summary>
            Callback for the connect operation.
            </summary>
            <param name="ar">Stores state information for this asynchronous 
            operation as well as any user-defined data.</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.ReceiveAsync(System.Net.Sockets.Socket)">
            <summary>
            Begins receiving for the data coming from the socket.
            </summary>
            <param name="client">The socket to get data from.</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.ReceiveCallback(System.IAsyncResult)">
            <summary>
            Callback for the receive operation.
            </summary>
            <param name="ar">Stores state information for this asynchronous 
            operation as well as any user-defined data.</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.Send(System.Net.Sockets.Socket,System.Byte[])">
            <summary>
            Writes data to the socket.
            </summary>
            <param name="client">The socket to write to.</param>
            <param name="byteData">The data to write.</param>
        </member>
        <member name="M:ToolsLib.Net.Telnet.TelnetClient.SendCallback(System.IAsyncResult)">
            <summary>
            Callback for the send operation.
            </summary>
            <param name="ar">Stores state information for this asynchronous 
            operation as well as any user-defined data.</param>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.SendEncoding">
            <summary>
            发送数据的编码
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.ReceiveEncoding">
            <summary>
            接收数据的编码
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.Hostname">
            <summary>
            Sets the name of the host to connect to.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.Port">
            <summary>
            Sets the port on the remote host.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.TerminalWidth">
            <summary>
            Sets the terminal width.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.TerminalHeight">
            <summary>
            Sets the terminal height.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.TerminalType">
            <summary>
            Sets the terminal type.
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Telnet.TelnetClient.Connected">
            <summary>
            Gets a value indicating whether a connection to the remote
            resource exists.
            </summary>
        </member>
        <member name="E:ToolsLib.Net.Telnet.TelnetClient.Completed">
            <summary>
            完成动作的事件定义
            </summary>
        </member>
        <member name="T:ToolsLib.Net.Telnet.CompletedEventHandler">
            <summary>
            完成某个动作的代理申明
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ToolsLib.FileService.FileCompress">
            <summary>
            文件压缩操作
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.Compress(System.String,System.String,ToolsLib.LibConst.CompressType)">
            <summary>
            单文件压缩
            </summary>
            <param name="sourceFileName">压缩文件地址,物理地址 或 者相对地址</param>
            <param name="targetDirectory">解压目录,物理地址 或 者相对地址</param>
            <param name="compressType"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.CompressDirectory(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            压缩目录
            </summary>
            <param name="zipFileName">压缩后文件地址,物理地址 或 者相对地址</param>
            <param name="sourceDirectory">准备压缩的文件物理地址 或 者相对地址</param>
            <param name="recurse">是否包含子目录</param>
            <param name="isDelete">是否删除原目录中所有文件</param>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.CompressDirectory(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
            压缩目录
            </summary>
            <param name="outputStream">输出文件流</param>
            <param name="sourceDirectory">准备压缩的文件物理地址 或 者相对地址</param>
            <param name="recurse">是否包含子目录</param>
            <param name="isDelete">是否删除原目录中所有文件</param>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.ListZipFile(System.String)">
            <summary>
            列表压缩文件包中的所有文件名称
            </summary>
            <param name="zipFileName">压缩文件地址物理地址 或 者相对地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.ExtractZip(System.String,System.String)">
            <summary>
            解压文件Zip文件
            </summary>
            <param name="zipFileName">压缩文件地址,物理地址 或 者相对地址</param>
            <param name="targetDirectory">解压目录,物理地址 或 者相对地址</param>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.Extract(System.String,System.String)">
            <summary>
            自动识别并解压文件zip/bz/gz
            </summary>
            <param name="zipFileName">压缩文件地址,物理地址 或 者相对地址</param>
            <param name="targetDirectory">解压目录,物理地址 或 者相对地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.FileCompress.CompressZipFile(System.String,System.String)">
            <summary>
            压缩Zip文件
            </summary>
            <param name="sourceFileName">待压缩的文件地址路径,物理地址</param>
            <param name="zipFileName">压缩后的ZIP文件地址路径,物理地址,包括后缀</param>
        </member>
        <member name="F:ToolsLib.Data.MySqlHelper.connectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand command that does not return value, by appointed and specified connectionstring 
            The parameter list using parameters that in array forms
            </summary>
            <remarks>
            Usage example: 
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure,
            "PublishOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">a valid database connectionstring</param>
            <param name="cmdType">MySqlCommand command type (stored procedures, T-SQL statement, and so on.) </param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">MySqlCommand to provide an array of parameters used in the list</param>
            <returns>Returns a value that means number of rows affected</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand command that does not return value, by appointed and specified connectionstring 
            The parameter list using parameters that in array forms
            </summary>
            <remarks>
            Usage example: 
            int result = ExecuteNonQuery(connString, CommandType.StoredProcedure,
            "PublishOrders", new MySqlParameter("@prodid", 24));
            </remarks>
            <param name="cmdType">MySqlCommand command type (stored procedures, T-SQL statement, and so on.) </param>
            <param name="connectionString">a valid database connectionstring</param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">MySqlCommand to provide an array of parameters used in the list</param>
            <returns>Returns true or false </returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand command that does not return value, by appointed and specified connectionstring 
            Array of form parameters using the parameter list 
            </summary>
            <param name="conn">connection</param>
            <param name="cmdType">MySqlCommand command type (stored procedures, T-SQL statement, and so on.)</param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">MySqlCommand to provide an array of parameters used in the list</param>
            <returns>Returns a value that means number of rows affected</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a SqlCommand command that does not return value, by appointed and specified connectionstring 
            Array of form parameters using the parameter list 
            </summary>
            <param name="trans">sql Connection that has transaction</param>
            <param name="cmdType">SqlCommand command type (stored procedures, T-SQL statement, and so on.)</param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">MySqlCommand to provide an array of parameters used in the list</param>
            <returns>Returns a value that means number of rows affected </returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Call method of sqldatareader to read data
            </summary>
            <param name="connectionString">connectionstring</param>
            <param name="cmdType">command type, such as using stored procedures: CommandType.StoredProcedure</param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">parameters</param>
            <returns>SqlDataReader type of data collection</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            use the ExectueScalar to read a single result
            </summary>
            <param name="connectionString">connectionstring</param>
            <param name="cmdType">command type, such as using stored procedures: CommandType.StoredProcedure</param>
            <param name="cmdText">stored procedure name or T-SQL statement</param>
            <param name="commandParameters">parameters</param>
            <returns>a value in object type</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.GetDataSet(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="cmdText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.CacheParameters(System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            cache the parameters in the HashTable
            </summary>
            <param name="cacheKey">hashtable key name</param>
            <param name="commandParameters">the parameters that need to cached</param>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.GetCachedParameters(System.String)">
            <summary>
            get parameters in hashtable by cacheKey
            </summary>
            <param name="cacheKey">hashtable key name</param>
            <returns>the parameters</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.PrepareCommand(MySql.Data.MySqlClient.MySqlCommand,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.Data.CommandType,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
             <summary>
            Prepare parameters for the implementation of the command
             </summary>
             <param name="cmd">mySqlCommand command</param>
             <param name="conn">database connection that is existing</param>
             <param name="trans">database transaction processing </param>
             <param name="cmdType">SqlCommand command type (stored procedures, T-SQL statement, and so on.) </param>
             <param name="cmdText">Command text, T-SQL statements such as Select * from Products</param>
             <param name="cmdParms">return the command that has parameters</param>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.CreateParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Data.ParameterDirection,System.Object)">
            <summary>
            Set parameters
            </summary>
            <param name="ParamName">parameter name</param>
            <param name="DbType">data type</param>
            <param name="Size">type size</param>
            <param name="Direction">input or output</param>
            <param name="Value">set the value</param>
            <returns>Return parameters that has been assigned</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.CreateInParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Object)">
            <summary>
            set Input parameters
            </summary>
            <param name="ParamName">parameter names, such as:@ id </param>
            <param name="DbType">parameter types, such as: MySqlDbType.Int</param>
            <param name="Size">size parameters, such as: the length of character type for the 100</param>
            <param name="Value">parameter value to be assigned</param>
            <returns>Parameters</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.CreateOutParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Output parameters 
            </summary>
            <param name="ParamName">parameter names, such as:@ id</param>
            <param name="DbType">parameter types, such as: MySqlDbType.Int</param>
            <param name="Size">size parameters, such as: the length of character type for the 100</param>
            <returns>parameter value to be assigned</returns>
        </member>
        <!-- 对于成员“M:ToolsLib.Data.MySqlHelper.CreateReturnParam(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)”忽略有格式错误的 XML 注释 -->
        <member name="M:ToolsLib.Data.MySqlHelper.GetPageParm(System.Int32,System.Int32,System.String,System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Generate paging storedProcedure parameters
            </summary>
            <param name="CurrentIndex">CurrentPageIndex</param>
            <param name="PageSize">pageSize</param>
            <param name="WhereSql">query Condition</param>
            <param name="TableName">tableName</param>
            <param name="Columns">columns to query</param>
            <param name="Sort">sort</param>
            <returns>MySqlParameter collection</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.GetCountParm(System.String,System.String,System.String)">
            <summary>
            Statistics data that in table
            </summary>
            <param name="TableName">table name</param>
            <param name="Columns">Statistics column</param>
            <param name="WhereSql">conditions</param>
            <returns>Set of parameters</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.GetSort(System.Collections.Hashtable)">
            <summary>
            Get the sql that is Sorted 
            </summary>
            <param name="sort"> sort column and values</param>
            <returns>SQL sort string</returns>
        </member>
        <member name="M:ToolsLib.Data.MySqlHelper.ExecuteTransaction(System.String,System.Data.CommandType,System.String[],MySql.Data.MySqlClient.MySqlParameter[][])">
            <summary>
            execute a trascation include one or more sql sentence(author:donne yin)
            </summary>
            <param name="connectionString"></param>
            <param name="cmdType"></param>
            <param name="cmdTexts"></param>
            <param name="commandParameters"></param>
            <returns>execute trascation result(success: true | fail: false)</returns>
        </member>
        <member name="T:ToolsLib.Net.FTP.FTPClient">
            <summary>
            FTP的相关操作
            </summary>
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setRemoteHost(System.String)">
            
             Set the name of the FTP server to connect to.
            
             Server name
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.getRemoteHost">
            
             Return the name of the current FTP server.
            
             Server name
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setRemotePort(System.Int32)">
            
             Set the port number to use for FTP.
            
             Port number
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.getRemotePort">
            
             Return the current port number.
            
             Current port number
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setRemotePath(System.String)">
            
             Set the remote directory path.
            
             The remote directory path
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.getRemotePath">
            
             Return the current remote directory path.
            
             The current remote directory path.
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setRemoteUser(System.String)">
            
             Set the user name to use for logging into the remote server.
            
             Username
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setRemotePass(System.String)">
            
             Set the password to user for logging into the remote server.
            
             Password
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.getFileList(System.String)">
            
             从文件系统中返回一个文件列表。在string()函数中返回文件。.
            
            
            
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.getFileSize(System.String)">
            
             得到FTP服务器上的文件大小.
            
            
            
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.login">
            
             登录FTP服务器
            
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setBinaryMode(System.Boolean)">
            
             如果模式值为真，对下载设置为二进制模式。否则，设置为ASCII模式
             Else, set Ascii mode.
            
            
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.download(System.String)">
            
             Download a file to the Assembly's local directory,
             keeping the same file name.
            
             向配置好的本地目录下载一个文件。保持文件名一样。
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.download(System.String,System.Boolean)">
            
             Download a remote file to the Assembly's local directory,
             keeping the same file name, and set the resume flag.
            
            
             向一个配置好的本地文件夹下载一个远程文件。保持文件名一样。
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.download(System.String,System.String)">
            
             Download a remote file to a local file name which can   include
             a path. The local file name will be created or overwritten,
             but the path must exist.
            
             对本地文件名下载一个远程文件。你必须包含一个路径。
             本地文件名将会创建或者将会被重写，但是路径必须存在。
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.download(System.String,System.String,System.Boolean)">
            
             Download a remote file to a local file name which can include
             a path, and set the resume flag. The local file name will be
             created or overwritten, but the path must exist.
            
             对一个本地文件名下载一个远程文件。你必须包含一个路径。
             设置恢复标志。本地文件名将会被创建或被重写，但是本地路径必须存在。
            
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.upload(System.String)">
            
             Upload a file.
            
             这是一个从你的本地硬盘上向你的FTP文件夹中上载文件的函数
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.upload(System.String,System.Boolean)">
            
             Upload a file and set the resume flag.
            
            
             这是一个从你的本地硬盘上向你的FTP网页上上载的函数和设置恢复标志
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.deleteRemoteFile(System.String)">
            
             Delete a file from the remote FTP server.
            
             从远程FTP服务器上删除一个文件。
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.renameRemoteFile(System.String,System.String)">
            
             Rename a file on the remote FTP server.
            
            
             在远程FTP服务器上重命名一个文件
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.mkdir(System.String)">
            
             Create a directory on the remote FTP server.
            
             这是一个在远程服务器上创建目录的函数
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.rmdir(System.String)">
            
             Delete a directory on the remote FTP server.
            
             这是一个在远程FTP服务器上删除目录的函数
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.chdir(System.String)">
            
             Change the current working directory on the remote FTP   server.
            
             这是一个用来在远程FTP服务器上改变当前工作目录的函数。
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.close">
            
             Close the FTP connection.
             关闭远程服务器的FTP链接
        </member>
        <member name="M:ToolsLib.Net.FTP.FTPClient.setDebug(System.Boolean)">
            
             Set debug mode.
            
            
        </member>
        <member name="T:ToolsLib.Data.OracleHelper">
            <summary>
            A helper class used to execute queries against an Oracle database
            </summary>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute a database query which does not include a select
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="cmdType">Command type either stored procedure or SQL</param>
            <param name="cmdText">Acutall SQL Command</param>
            <param name="commandParameters">Parameters to bind to the command</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.Query(System.String,System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.GetSingle(System.String,System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="connectionString"></param>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database transaction 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="trans">an existing database transaction</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteNonQuery(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="connection">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Execute an OracleCommand (that returns no resultset) against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="connectionString">an existing database connection</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <returns>an int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand that returns the first column of the first record against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(connString, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="connectionString">a valid connection string for a SqlConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute	a OracleCommand (that returns a 1x1 resultset)	against	the	specified SqlTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A	valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name	or PL/SQL command</param>
            <param name="commandParameters">An array of	OracleParamters used to execute the command</param>
            <returns>An	object containing the value	in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteScalar(System.Data.OracleClient.OracleConnection,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Execute an OracleCommand that returns the first column of the first record against an existing database connection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             Object obj = ExecuteScalar(conn, CommandType.StoredProcedure, "PublishOrders", new OracleParameter(":prodid", 24));
            </remarks>
            <param name="connectionString">an existing database connection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or PL/SQL command</param>
            <param name="commandParameters">an array of OracleParamters used to execute the command</param>
            <returns>An object that should be converted to the expected type using Convert.To{Type}</returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.CacheParameters(System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Add a set of parameters to the cached
            </summary>
            <param name="cacheKey">Key value to look up the parameters</param>
            <param name="commandParameters">Actual parameters to cached</param>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.GetCachedParameters(System.String)">
            <summary>
            Fetch parameters from the cache
            </summary>
            <param name="cacheKey">Key to look up the parameters</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.PrepareCommand(System.Data.OracleClient.OracleCommand,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction,System.Data.CommandType,System.String,System.Data.OracleClient.OracleParameter[])">
            <summary>
            Internal function to prepare a command for execution by the database
            </summary>
            <param name="cmd">Existing command object</param>
            <param name="conn">Database connection object</param>
            <param name="trans">Optional transaction object</param>
            <param name="cmdType">Command type, e.g. stored procedure</param>
            <param name="cmdText">Command test</param>
            <param name="commandParameters">Parameters for the command</param>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.OraBit(System.Boolean)">
            <summary>
            Converter to use boolean data type with Oracle
            </summary>
            <param name="value">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.OraBool(System.String)">
            <summary>
            Converter to use boolean data type with Oracle
            </summary>
            <param name="value">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteSqlTran(System.String,System.Collections.Generic.List{ToolsLib.Data.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="conStr"></param>
            <param name="cmdList">多条SQL语句</param>		
        </member>
        <member name="M:ToolsLib.Data.OracleHelper.ExecuteSqlTran(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="conStr"></param>		
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="F:ToolsLib.Data.EffentNextType.None">
            <summary>
            对其他语句无任何影响 
            </summary>
        </member>
        <member name="F:ToolsLib.Data.EffentNextType.WhenHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果存在则继续执行，不存在回滚事务
            </summary>
        </member>
        <member name="F:ToolsLib.Data.EffentNextType.WhenNoHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:ToolsLib.Data.EffentNextType.ExcuteEffectRows">
            <summary>
            当前语句影响到的行数必须大于0，否则回滚事务
            </summary>
        </member>
        <member name="F:ToolsLib.Data.EffentNextType.SolicitationEvent">
            <summary>
            引发事件-当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:ToolsLib.Https.HttpHandlers.AjaxRequest.AjaxConsts.AjaxType.AutoComplete">
            <summary>
            自动填充文本框数据
            </summary>
        </member>
        <member name="F:ToolsLib.Https.HttpHandlers.AjaxRequest.AjaxConsts.AjaxType.JsonSuggestBox">
            <summary>
            自动填充文本框数据,另外一种格式
            </summary>
        </member>
        <member name="F:ToolsLib.Https.HttpHandlers.AjaxRequest.AjaxConsts.AjaxType.ToolTip">
            <summary>
            鼠标提示样式
            </summary>
        </member>
        <member name="F:ToolsLib.Https.HttpHandlers.AjaxRequest.AjaxConsts.AjaxType.Normal">
            <summary>
            一般Ajax类型
            </summary>
        </member>
        <member name="F:ToolsLib.Https.HttpHandlers.AjaxRequest.AjaxConsts.AjaxType.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:ToolsLib.EncryptService.Triple_DES">
            <summary>
            三重DES(对称加密类)
            </summary>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="msg"></param>
            <returns>返回Base64编码值</returns>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Encrypt(System.String,System.String)">
            <summary>
            加密文件内容,返回Base64编码值
            </summary>
            <param name="sourceFileName"></param>
            <param name="outFileName"></param>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Decrypt(System.String,System.String)">
            <summary>
            解密加密的文件信息
            </summary>
            <param name="sourceFileName"></param>
            <param name="outFileName"></param>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Encrypt(System.Byte[])">
            <summary>
            加密方法byte[] to byte[]
            </summary>
            <param name="Source">待加密的byte数组</param>
            <returns>经过加密的byte数组</returns>
        </member>
        <member name="M:ToolsLib.EncryptService.Triple_DES.Decrypt(System.Byte[])">
            <summary>
            解密方法byte[] to byte[]
            </summary>
            <param name="Source">待解密的byte数组</param>
            <returns>经过解密的byte数组</returns>
        </member>
        <member name="T:ToolsLib.Net.Ping.PingHelper">
            <summary>
            Ping命令的简单包装
            </summary>
        </member>
        <member name="M:ToolsLib.Net.Ping.PingHelper.StartRunning(System.String)">
            <summary>
            开始运行Ping命令
            </summary>
            <param name="iporhostname">IP地址或主机名</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.Https.HttpModules.RequestTracker.RequestModel">
            <summary>
            RequestCollection 的摘要说明。
            </summary>
        </member>
        <member name="T:ToolsLib.Configuration.RequestTrackerConfiguration">
            <summary>
            RequestTrackerConfiguration 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.Configuration.RequestTrackerConfiguration.OnApplicationStart">
            <summary>
            启动配置结
            </summary>
        </member>
        <member name="T:ToolsLib.Utility.WebUtils">
            <summary>
            
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.Resulve(System.String)">
            <summary>
            将Web服务器上的虚拟地址转换为物理地址
            </summary>
            <param name="url">虚拟地址</param>
            <returns>物理地址</returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.ResulveUrl(System.String)">
            <summary>
            将Web服务器上的虚拟地址转换为在客户端请求的地址，不支持"../../"
            </summary>
            <param name="url">站点的路径地址:/default.aspx或~/default.aspx</param>
            <returns>客户端请求的地址:/WebSite/default.aspx</returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.ResulveHttpUrl(System.String)">
            <summary>
            将Web服务器上的虚拟地址转换为HTTP访问的地址，不支持"../../"
            </summary>
            <param name="url">站点的路径地址:/default.aspx或~/default.aspx</param>
            <returns>HTTP访问的地址:http://localhost:82/demo/default.aspx</returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.GetRunningDir(System.String)">
            <summary>
            当前应用程序的根目录的文件系统路径，结尾不带【/】
            </summary>
            <param name="dir">目录地址</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.IsAjaxRequest(System.String)">
            <summary>
            检测当前请求是否为Ajax请求
            </summary>
            <param name="requestUrl">当前请求页面地址的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.GetSettingsValue(System.String)">
            <summary>
            返回web.config文件中的AppSetting的节点值
            </summary>
            <param name="sKeyName">关键字名称</param>
            <returns>关键字值</returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.ResponseXML(System.String)">
            <summary>
            输出XML串
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.GetIntParam(System.String,System.Int32)">
            <summary>
            获取Query Or Form中的Int类型参数，参数名
            </summary>
            <param name="paramName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.GetStringParam(System.String,System.String)">
            <summary>
            获取安全字符串，过滤关键字符
            </summary>
            <param name="paramName"></param>
            <param name="defaultValue">空值或存在依赖注入时替换字符串</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.RegisterScriptReference(System.Web.UI.Page,System.String)">
            <summary>
            页面注册脚本引用.
            </summary>
            <param name="currentPage"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.RegisterCSSReference(System.Web.UI.Page,System.String,System.String)">
            <summary>
            页面注册CSS文件引用.
            </summary>
            <param name="currentPage"></param>
            <param name="filePath"></param>
            <param name="title"></param>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.WriteOperateLog(System.String,System.String)">
            <summary>
            保存用户操作日志
            </summary>
            <param name="operateType">操作类型</param>
            <param name="logContent">日志详细内容</param>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.AuthorizeFilter(System.String)">
            <summary>
            权限体系中标签过滤
            </summary>
            <param name="inputHtml"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.AuthorizeFilter(System.Text.StringBuilder,System.Collections.Hashtable)">
            <summary>
            权限体系中标签过滤
            </summary>
            <param name="inputHtml"></param>
            <param name="pageAcl">页面访问权限集合</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.Utility.WebUtils.AuthorizeFilter(System.String,System.Collections.Hashtable)">
            <summary>
            权限体系中标签过滤
            </summary>
            <param name="inputHtml"></param>
            <param name="pageAcl">页面访问权限集合</param>
            <returns></returns>
        </member>
        <member name="P:ToolsLib.Utility.WebUtils.BaseAppPreSuffix">
            <summary>
            获取应用的Http前缀，如:http://localhost:2221/ASK
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.WebUtils.ClientIP">
            <summary>
            获取客户端IP地址
            </summary>
        </member>
        <member name="P:ToolsLib.Utility.WebUtils.IdentityName">
            <summary>
            获取用户登录后的User.Identity.Name，需要在登录时赋值后才能取出
            </summary>
        </member>
        <member name="T:ToolsLib.ReportService.TableReport">
            <summary>
            TableReport 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.CreateTableStyleDefault(System.Web.UI.WebControls.Table@)">
            <summary>
            创建默认的表格样式
            </summary>
            <param name="tb">Table对象</param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.BindTableHeader(System.Web.UI.WebControls.Table@,System.String[],System.String[],System.String[])">
            <summary>
            绑定TableHeader中的数据
            </summary>
            <param name="table">Table对象</param>
            <param name="firstArray">表格第一表头信息数组,无:null,{"部门", "人数", "男", "女", "平均年龄", "年龄结构", "学历结构"}</param>
            <param name="secondArrary">表格第二表头信息数组,无:null,{"", "", "", "", "", "24岁以下,25-29,30-34,35-39,40-44,45-49,50以上", "研究生,本科,大专,中专,高中,初中"}</param>
            <param name="thirdArrary">表格第三表头信息数组,无:null,{"", "", "", "", "", "人数,比例;人数,比例;人数,比例;人数,比例;人数,比例;人数,比例;人数,比例", "人数,比例;人数,比例;人数,比例;人数,比例;人数,比例;人数,比例"}</param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.BindTableData(System.Web.UI.WebControls.Table@,System.Data.DataSet,System.String)">
            <summary>
            绑定Table中的主体数据
            </summary>
            <param name="tb">Table对象</param>
            <param name="ds">DataSet数据集</param>
            <param name="tableName">数据集中的tableName</param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.GetTableStatRow(System.Web.UI.WebControls.Table,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            对表格中的多行数据进行统计
            </summary>
            <param name="tb">Table对象</param>
            <param name="startRow">起始行</param>
            <param name="endRow">终止行</param>
            <param name="startCol">起始列</param>
            <param name="endCol">终止列</param>
            <param name="titleMsg">第一个单元的文字描述</param>
            <returns>包含统计信息的TableRow对象</returns>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.AddTableStatColumn(System.Web.UI.WebControls.Table@,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            对表格中的多列数据进行统计
            </summary>
            <param name="tb">Table对象</param>
            <param name="startRow">起始行</param>
            <param name="endRow">终止行</param>
            <param name="startCol">起始列</param>
            <param name="endCol">终止列</param>
            <param name="titleMsg">第一个单元的文字描述</param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.AddCellColor(System.Web.UI.WebControls.Table@,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            向表中的单元添加背景颜色
            </summary>
            <param name="tb"></param>
            <param name="startRow"></param>
            <param name="endRow"></param>
            <param name="startColumn"></param>
            <param name="endColumn"></param>
            <param name="color"></param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.AddNo(System.Web.UI.WebControls.Table@,System.Int32,System.Int32)">
            <summary>
            向表格中添加1，2，3...等序号
            </summary>
            <param name="tb"></param>
            <param name="startRow"></param>
            <param name="columnLocation"></param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.AddCheckBox(System.Web.UI.WebControls.Table@,System.Int32,System.Int32,System.Data.DataTable,System.String)">
            <summary>
            向表格中添加CheckBox选择框
            </summary>
            <param name="tb"></param>
            <param name="startRow"></param>
            <param name="columnLocation"></param>
            <param name="dt"></param>
            <param name="fieldName">数据库表中的字段名称</param>
        </member>
        <member name="M:ToolsLib.ReportService.TableReport.CreateTableRow">
            <summary>
            内部使用函数,创建TableRow对象
            </summary>
            <returns>新TableRow对象</returns>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.StateObject.BufferSize">
            <summary>
            缓存长度 = 8K
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.StateObject.buffer">
            <summary>
            每次读取的字节数组
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.StateObject.BufferSizeEveryTurn">
            <summary>
            每次读取的字节数
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.StateObject.AllReadedBuffer">
            <summary>
            每次读取的所有字节
            </summary>
        </member>
        <member name="F:ToolsLib.Net.SocketHelper.StateObject.remoteEP">
            <summary>
            远端UdpClient信息
            </summary>
        </member>
        <member name="T:ToolsLib.Https.HttpHandlers.AjaxRequestHandler">
            <summary>
            其中参数ajaxtype=autocomplete|tooltip|normal是必须的
            </summary>
        </member>
        <member name="T:ToolsLib.FileService.ExcelFile">
            <summary>
            ExcelFileProc 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.ReadExcelFileOleDb(System.String,System.String,System.Boolean)">
            <summary>
            读取Excel文件内容
            </summary>
            <param name="FileName">文件的物理路径或Web虚拟路径</param>
            <param name="SheetName">Sheet名称</param>
            <param name="IsDelete">读取文件后是否删除此文件</param>
            <returns>DataTable集合</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.getCellValue(NPOI.SS.UserModel.ICell)">
            <summary>
            获取Excel单元格内容
            </summary>
            <param name="cell"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.ReadExcelFile(System.String,System.String,System.Boolean)">
            <summary>
            读取Excel文件内容
            </summary>
            <param name="FileName">文件的物理路径 或 Web虚拟路径</param>
            <param name="SheetName">Sheet名称</param>
            <param name="IsDelete">读取文件后是否删除此文件</param>
            <returns>DataTable集合</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.ReadExcelFile(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            读取Excel文件内容
            </summary>
            <param name="FileName">文件的物理路径 或 Web虚拟路径</param>
            <param name="SheetName">Sheet名称</param>
            <param name="rowStartIndex">列表表头索引号</param>
            <param name="IsDelete">读取文件后是否删除此文件</param>
            <returns>DataTable集合</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcelOleDb(System.Data.DataTable,System.String,System.String)">
            <summary>
            将数据写入Excel文件中
            </summary>
            <param name="dt">待写入数据源，DataTable列名与Excel表头一致</param>
            <param name="sTemplateFile">模板文件物理路径或Web虚拟路径</param>
            <param name="sSheetName">模板文件中的sheet名称</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcelOleDb``1(System.Collections.Generic.IList{``0},System.String,System.String)">
            <summary>
            将数据写入Excel文件中
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="arrayList">待写入数据源</param>
            <param name="sTemplateFile">模板文件物理路径或Web虚拟路径</param>
            <param name="sSheetName">模板文件中的sheet名称</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel``1(System.Collections.Generic.IList{``0})">
            <summary>
            将数据写入Excel2003文件中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayList">待写入数据源</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            将数据写入Excel2003文件中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrayList">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Data.DataTable)">
            <summary>
            将数据写入Excel2003文件中
            </summary>
            <param name="dt">待写入数据源</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Data.DataTable,System.String)">
            <summary>
            将数据写入Excel2003文件中
            </summary>
            <param name="dt">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Data.DataTable,System.String,ToolsLib.LibConst.ExcelVersion)">
            <summary>
            将数据写入Excel文件中
            </summary>
            <param name="dt">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <param name="version">Excel版本</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            将数据写入Excel模板文件中
            </summary>
            <param name="dt">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <param name="templateFile">模板文件虚拟路径 或 物理路径</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Data.DataTable,System.String,System.Int32,System.String)">
            <summary>
            将数据写入Excel模板文件中
            </summary>
            <param name="dt">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <param name="startIndex">模板文件开始插入数据的索引号</param>
            <param name="templateFile">模板文件虚拟路径 或 物理路径</param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.WriteDataToExcel(System.Collections.Generic.List{System.String},System.Data.DataTable,System.String,ToolsLib.LibConst.ExcelVersion)">
            <summary>
            将数据写入Excel2003/2007文件中
            </summary>
            <param name="headerNameList">Excel表头</param>
            <param name="dt">待写入数据源</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <param name="version"></param>
            <returns>写入数据后的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.CreateExcel(System.Collections.Generic.List{System.String})">
            <summary>
            创建Ｅｘｃｅｌ2003模板文件
            </summary>
            <param name="headerName">Excel表头集合</param>
            <returns>新生成的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.CreateExcel(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            创建Ｅｘｃｅｌ2003模板文件
            </summary>
            <param name="headerName">Excel表头集合</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <returns>新生成的Excel文件物理路径地址</returns>
        </member>
        <member name="M:ToolsLib.FileService.ExcelFile.CreateExcel(System.Collections.Generic.List{System.String},System.String,ToolsLib.LibConst.ExcelVersion)">
            <summary>
            创建Ｅｘｃｅｌ模板文件
            </summary>
            <param name="headerName">Excel表头集合</param>
            <param name="sheetName">Excel文件中的sheet名称</param>
            <param name="version"></param>
            <returns>新生成的Excel文件物理路径地址</returns>
        </member>
        <member name="T:ToolsLib.EncryptService.MessageDigestHelper">
            <summary>
            消息摘要算法
            </summary>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Code(System.String,System.Text.Encoding)">
            <summary>
            返回32字符的十六进制格式哈希字符串
            </summary>
            <param name="msg"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Code(System.IO.Stream)">
            <summary>
            返回32字符的十六进制格式哈希字符串
            </summary>
            <param name="inputStream"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Code(System.Byte[])">
            <summary>
            返回32字符的十六进制格式哈希字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Code(System.String)">
            <summary>
            返回32字符的十六进制格式哈希字符串
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Hash(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns>返回16 字节的数组哈希</returns>
        </member>
        <member name="M:ToolsLib.EncryptService.MessageDigestHelper.GetMD5Hash(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
            <returns>返回16 字节的数组哈希</returns>
        </member>
        <member name="T:ToolsLib.EncryptService.MessageDigestHelper.SHASize">
            <summary>
            哈希值大小
            </summary>
        </member>
        <member name="F:ToolsLib.EncryptService.MessageDigestHelper.SHASize.SHA1">
            <summary>
            哈希值大小为 160 位
            </summary>
        </member>
        <member name="F:ToolsLib.EncryptService.MessageDigestHelper.SHASize.SHA256">
            <summary>
            哈希值大小为 256 位
            </summary>
        </member>
        <member name="F:ToolsLib.EncryptService.MessageDigestHelper.SHASize.SHA384">
            <summary>
            哈希值大小为 384 位
            </summary>
        </member>
        <member name="F:ToolsLib.EncryptService.MessageDigestHelper.SHASize.SHA512">
            <summary>
            哈希值大小为 512 位
            </summary>
        </member>
        <member name="M:ToolsLib.Https.HttpModules.RequestTrackerModule.isSave(System.String)">
            <summary>
            本次请求的页面是否需要保存
            </summary>
            <param name="requestPageExtension">要检查某个字符串</param>
            <returns></returns>
        </member>
        <member name="T:ToolsLib.EncryptService.RijndaelEncry">
            <summary>
            对称加密算法
            Rijndael----AES高级对称加密。
            有效密钥大小(位):128,192,256
            默认密钥大小(位):256
            </summary>
        </member>
        <member name="M:ToolsLib.EncryptService.RijndaelEncry.Encrypt(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="msg"></param>
            <returns>返回Base64编码值</returns>
        </member>
        <member name="M:ToolsLib.EncryptService.RijndaelEncry.Decrypt(System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="secretMsg"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.EncryptService.RijndaelEncry.Encrypt(System.String,System.String)">
            <summary>
            加密文件内容,返回Base64编码值
            </summary>
            <param name="sourceFileName"></param>
            <param name="outFileName"></param>
        </member>
        <member name="M:ToolsLib.EncryptService.RijndaelEncry.Decrypt(System.String,System.String)">
            <summary>
            解密加密的文件信息
            </summary>
            <param name="sourceFileName"></param>
            <param name="outFileName"></param>
        </member>
        <member name="F:ToolsLib.Utility.CRCUtils.crc_8">
            <summary>
            CRC8校验结果; 
            </summary>
        </member>
        <member name="M:ToolsLib.Utility.CRCUtils.Reset">
            <summary> 
            CRC校验前设置校验值 
            </summary> 
        </member>
        <member name="M:ToolsLib.Utility.CRCUtils.Crc8(System.Byte,System.Byte)">
            <summary> 
            8 位 CRC 校验 产生校验码 需要被校验码和校验码 
            </summary> 
            <param name="CRC"></param> 
            <param name="OldCRC"> 初始为 0 ,以后为 返回值 ret </param> 
            <returns> 产生校验码时 ret　为校验码</returns> 
        </member>
        <member name="M:ToolsLib.Utility.CRCUtils.Crc8(System.Int32)">
            <summary> 
            8 位 CRC 校验 产生校验码
            </summary> 
            <param name="bval">待校验码</param> 
        </member>
        <member name="M:ToolsLib.Utility.CRCUtils.Crc8(System.Byte[])">
            <summary> 
            8 位 CRC 校验 产生校验码
            </summary> 
            <param name="buffer">待校验字节数组</param> 
        </member>
        <member name="M:ToolsLib.Utility.CRCUtils.Crc8(System.Byte[],System.Int32,System.Int32)">
            <summary> 
            8 位 CRC 校验 产生校验码
            </summary> 
            <param name="buf">被校验的字节数组</param> 
            <param name="off">起始位置</param> 
            <param name="len">字节长度</param> 
        </member>
        <member name="F:ToolsLib.Utility.CRCUtils.uppercrctab">
            <summary> 
            16 位校验表 Upper 表 
            </summary> 
        </member>
        <member name="F:ToolsLib.Utility.CRCUtils.lowercrctab">
            <summary> 
            16 位校验表 Lower 表 
            </summary> 
        </member>
        <member name="T:ToolsLib.ReportService.RichReport">
            <summary>
            RichReport 的摘要说明。
            </summary>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.Caky_Table(System.Web.UI.Page,System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            摘　要： 统计图--饼图
            </summary>
            <param name="myPage"></param>
            <param name="dt"></param>
            <param name="table_left">横坐标</param>
            <param name="table_top">纵坐标</param>
            <param name="all_width">图表的宽度</param>
            <param name="all_height">图表的高度</param>
            <param name="table_title">图表标题</param>
            <param name="unit">单位</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.Curve_table(System.Web.UI.Page,System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            统计图--曲线图
            </summary>
            <param name="myPage"></param>
            <param name="dt"></param>
            <param name="table_left">横坐标</param>
            <param name="table_top">纵坐标</param>
            <param name="all_width">图表的宽度</param>
            <param name="all_height">图表的高度</param>
            <param name="table_title">图表标题</param>
            <param name="X_unit">X轴单位</param>
            <param name="Y_unit">Y轴单位</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.Curve_table(System.Web.UI.Page,System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Double)">
            <summary>
            统计图--曲线图
            </summary>
            <param name="myPage"></param>
            <param name="dt"></param>
            <param name="table_left">横坐标</param>
            <param name="table_top">纵坐标</param>
            <param name="all_width">图表的宽度</param>
            <param name="all_height">图表的高度</param>
            <param name="table_title">图表标题</param>
            <param name="X_unit">X轴单位</param>
            <param name="Y_unit">Y轴单位</param>
            <param name="max_XDouble"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.Curve_table(System.Web.UI.Page,System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            统计图--曲线图
            </summary>
            <param name="myPage"></param>
            <param name="dt"></param>
            <param name="table_left">横坐标</param>
            <param name="table_top">纵坐标</param>
            <param name="all_width">图表的宽度</param>
            <param name="all_height">图表的高度</param>
            <param name="table_title">图表标题</param>
            <param name="X_unit">X轴单位</param>
            <param name="Y_unit">Y轴单位</param>
            <param name="max_XValue">Y轴单位最大值</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.Box_table(System.Web.UI.Page,System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            统计图--直方图
            </summary>
            <param name="myPage"></param>
            <param name="dt"></param>
            <param name="table_left">横坐标</param>
            <param name="table_top">纵坐标</param>
            <param name="all_width">图表的宽度</param>
            <param name="all_height">图表的高度</param>
            <param name="table_title">图表标题</param>
            <param name="X_unit">X轴单位</param>
            <param name="Y_unit">Y轴单位</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.RegistScript_Curve(System.Web.UI.Page)">
            <summary>
            注册统计图--曲线图的客户端脚本
            </summary>
            <param name="myPage"></param>
        </member>
        <member name="M:ToolsLib.ReportService.RichReport.RegistScript_Caky(System.Web.UI.Page)">
            <summary>
            注册统计图--饼图的客户端脚本
            </summary>
            <param name="myPage"></param>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialAsyncEventArgs.LogMsg">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="P:ToolsLib.Net.Serial.SerialAsyncEventArgs.ReadedBuffer">
            <summary>
            每次读取串口时获得的字节
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Serial.SerialAsyncOperation.Connect">
            <summary>
            连接服务器动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Serial.SerialAsyncOperation.Receiveing">
            <summary>
            正在接收数据动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Serial.SerialAsyncOperation.ReceiveComplete">
            <summary>
            完成接收数据动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Serial.SerialAsyncOperation.Disconnected">
            <summary>
            关闭基础连接动作
            </summary>
        </member>
        <member name="F:ToolsLib.Net.Serial.SerialAsyncOperation.Sending">
            <summary>
            发送命令动作
            </summary>
        </member>
        <member name="T:ToolsLib.IBatisNet.BaseDbHelper">
            <summary>
            IBatisNet的数据访问帮助类.
            主要用于不需要IBatisNet的映射的情况，如直接执行sql、返回DataSet等.
            仿MS的SqlHelper，主要不同点在于借助IBatisNet的DataSource/DbProvider来创建IDbConnection、IDbCommand、IDbDataAdapter、IDbDataParameter.
            而不是像SqlHelper一样通过SqlConnection、SqlCommand等来访问.
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.BaseDbHelper._mapper">
            <summary>
            如果需要变更数据库，需赋值新的Mapper对象
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.BaseDbHelper.dbProvider">
            <summary>
            数据提供源.
            </summary>
        </member>
        <member name="F:ToolsLib.IBatisNet.BaseDbHelper.ConnectionString">
            <summary>
            数据库连接字符串.
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.#ctor">
            <summary>
            默认取DefaultMapper.GetMapper().mapper对象
            </summary>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.#ctor(ToolsLib.IBatisNet.BaseMapper)">
            <summary>
            需要传入实例化的BaseMapper对象
            </summary>
            <param name="baseMapper"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.#ctor(IBatisNet.DataMapper.ISqlMapper)">
            <summary>
            需要传入实例化的ISqlMapper对象
            </summary>
            <param name="mapper"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.CreateConnection">
            <summary>
            创建数据库连接实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.CreateCommand">
            <summary>
            创建数据操作命令接口.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.CreateDataAdapter">
            <summary>
            创建数据适配器实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.CreateParameter">
            <summary>
            创建数据参数实例.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.CreateParameterSet(System.Int32)">
            <summary>
            创建数据参数集合.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.AttachParameters(System.Data.IDbCommand,System.Data.IDbDataParameter[])">
            <summary>
            附件参数对象到指定 IDbCommand 对象.
            </summary>
            <param name="command"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.AssignParameterValues(System.Data.IDbDataParameter[],System.Object[])">
            <summary>
            设置参数值.
            </summary>
            <param name="commandParameters"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[],System.Boolean@)">
            <summary>
            设置命令对象.
            </summary>
            <param name="command"></param>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <param name="mustCloseConnection"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行SQL, 并返回受影响的行数.
            </summary>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
             执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列. 忽略其他列或行.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
             执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并生成一个 System.Data.IDataReader 对象.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteDataset(System.Data.CommandType,System.String)">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteDataset(System.String,System.Object[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="spName"></param>
            <param name="parameterValues"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回结果数据集.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="spName"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.IDbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="spName"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.FillDataset(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDbDataParameter[])">
            <summary>
            执行查询，并返回查询所返回的结果集填充到指定数据集中.
            </summary>
            <param name="connection"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <param name="commandText"></param>
            <param name="dataSet"></param>
            <param name="tableNames"></param>
            <param name="commandParameters"></param>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@)">
            <summary>
            获取已分页列表，存储过程名称“spPageViewByStr”
            </summary>
            <param name="tableName">要分页显示的表(视图)名.</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段.</param>
            <param name="pageIndex">要显示的页码，从1开始</param>
            <param name="pageSize">每页的大小(记录数).</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段.</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序.</param>
            <param name="where">查询条件.</param>
            <param name="recordCount">总记录数.</param>
            <returns></returns>
        </member>
        <member name="M:ToolsLib.IBatisNet.BaseDbHelper.GetPagedList(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32@,System.String)">
            <summary>
            获取已分页列表.
            </summary>
            <param name="tableName">要分页显示的表(视图)名.</param>
            <param name="fieldKey">于定位记录的主键(惟一键)字段,只能是单个字段.</param>
            <param name="pageIndex">要显示的页码，从1开始</param>
            <param name="pageSize">每页的大小(记录数).</param>
            <param name="fieldShow">以逗号分隔的要显示的字段列表,如果不指定,则显示所有字段.</param>
            <param name="fieldOrder">以逗号分隔的排序字段列表,可以指定在字段后面指定DESC/ASC 用于指定排序顺序.</param>
            <param name="where">查询条件.</param>
            <param name="recordCount">总记录数.</param>
            <param name="procedureName">存储过程名称</param>
            <returns></returns>
        </member>
    </members>
</doc>
