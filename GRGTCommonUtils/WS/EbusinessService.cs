//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace GRGTCommonUtils.WS
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_EbusinessService", Namespace = "http://tempuri.org/")]
    public partial class CustomerPortalService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback SyncAccountToCustomerPortalOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteAccountInCustomerPortalOperationCompleted;

        private System.Threading.SendOrPostCallback SendOrderOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateOrderStateOperationCompleted;

        private System.Threading.SendOrPostCallback SendContactOperationCompleted;

        private System.Threading.SendOrPostCallback GetContactFeedbackInfoOperationCompleted;

        private System.Threading.SendOrPostCallback CheckInstrumentVersionOperationCompleted;

        private System.Threading.SendOrPostCallback LoginValidateOperationCompleted;

        /// <remarks/>
        public CustomerPortalService()
        {
            this.Url = "http://localhost:8003/Ebusiness";
        }

        /// <remarks/>
        public event SyncAccountToCustomerPortalCompletedEventHandler SyncAccountToCustomerPortalCompleted;

        /// <remarks/>
        public event DeleteAccountInCustomerPortalCompletedEventHandler DeleteAccountInCustomerPortalCompleted;

        /// <remarks/>
        public event SendOrderCompletedEventHandler SendOrderCompleted;

        /// <remarks/>
        public event UpdateOrderStateCompletedEventHandler UpdateOrderStateCompleted;

        /// <remarks/>
        public event SendContactCompletedEventHandler SendContactCompleted;

        /// <remarks/>
        public event GetContactFeedbackInfoCompletedEventHandler GetContactFeedbackInfoCompleted;

        /// <remarks/>
        public event CheckInstrumentVersionCompletedEventHandler CheckInstrumentVersionCompleted;

        /// <remarks/>
        public event LoginValidateCompletedEventHandler LoginValidateCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/SyncAccountToCustomerPortal", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SyncAccountToCustomerPortal([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginPwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string companyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userState)
        {
            this.Invoke("SyncAccountToCustomerPortal", new object[] {
                        loginName,
                        loginPwd,
                        companyCode,
                        userState});
        }

        /// <remarks/>
        public System.IAsyncResult BeginSyncAccountToCustomerPortal(string loginName, string loginPwd, string companyCode, string userState, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SyncAccountToCustomerPortal", new object[] {
                        loginName,
                        loginPwd,
                        companyCode,
                        userState}, callback, asyncState);
        }

        /// <remarks/>
        public void EndSyncAccountToCustomerPortal(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SyncAccountToCustomerPortalAsync(string loginName, string loginPwd, string companyCode, string userState)
        {
            this.SyncAccountToCustomerPortalAsync(loginName, loginPwd, companyCode, userState, null);
        }

        /// <remarks/>
        public void SyncAccountToCustomerPortalAsync(string loginName, string loginPwd, string companyCode, string userState, object userState1)
        {
            if ((this.SyncAccountToCustomerPortalOperationCompleted == null))
            {
                this.SyncAccountToCustomerPortalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSyncAccountToCustomerPortalOperationCompleted);
            }
            this.InvokeAsync("SyncAccountToCustomerPortal", new object[] {
                        loginName,
                        loginPwd,
                        companyCode,
                        userState}, this.SyncAccountToCustomerPortalOperationCompleted, userState1);
        }

        private void OnSyncAccountToCustomerPortalOperationCompleted(object arg)
        {
            if ((this.SyncAccountToCustomerPortalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SyncAccountToCustomerPortalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/DeleteAccountInCustomerPortal", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAccountInCustomerPortal([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginName)
        {
            this.Invoke("DeleteAccountInCustomerPortal", new object[] {
                        loginName});
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteAccountInCustomerPortal(string loginName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteAccountInCustomerPortal", new object[] {
                        loginName}, callback, asyncState);
        }

        /// <remarks/>
        public void EndDeleteAccountInCustomerPortal(System.IAsyncResult asyncResult)
        {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void DeleteAccountInCustomerPortalAsync(string loginName)
        {
            this.DeleteAccountInCustomerPortalAsync(loginName, null);
        }

        /// <remarks/>
        public void DeleteAccountInCustomerPortalAsync(string loginName, object userState)
        {
            if ((this.DeleteAccountInCustomerPortalOperationCompleted == null))
            {
                this.DeleteAccountInCustomerPortalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccountInCustomerPortalOperationCompleted);
            }
            this.InvokeAsync("DeleteAccountInCustomerPortal", new object[] {
                        loginName}, this.DeleteAccountInCustomerPortalOperationCompleted, userState);
        }

        private void OnDeleteAccountInCustomerPortalOperationCompleted(object arg)
        {
            if ((this.DeleteAccountInCustomerPortalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccountInCustomerPortalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/SendOrder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SendOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sendOrderJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sendOrderProjectJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("SendOrder", new object[] {
                        sendOrderJson,
                        sendOrderProjectJson,
                        acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSendOrder(string sendOrderJson, string sendOrderProjectJson, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SendOrder", new object[] {
                        sendOrderJson,
                        sendOrderProjectJson,
                        acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSendOrder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SendOrderAsync(string sendOrderJson, string sendOrderProjectJson, string acessToken)
        {
            this.SendOrderAsync(sendOrderJson, sendOrderProjectJson, acessToken, null);
        }

        /// <remarks/>
        public void SendOrderAsync(string sendOrderJson, string sendOrderProjectJson, string acessToken, object userState)
        {
            if ((this.SendOrderOperationCompleted == null))
            {
                this.SendOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOrderOperationCompleted);
            }
            this.InvokeAsync("SendOrder", new object[] {
                        sendOrderJson,
                        sendOrderProjectJson,
                        acessToken}, this.SendOrderOperationCompleted, userState);
        }

        private void OnSendOrderOperationCompleted(object arg)
        {
            if ((this.SendOrderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOrderCompleted(this, new SendOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/UpdateOrderState", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string UpdateOrderState([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("UpdateOrderState", new object[] {
                        orderNumber,
                        acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/RemoveOrder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RemoveOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("RemoveOrder", new object[] {
                        orderNumber,
                        acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginUpdateOrderState(string orderNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("UpdateOrderState", new object[] {
                        orderNumber,
                        acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndUpdateOrderState(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void UpdateOrderStateAsync(string orderNumber, string acessToken)
        {
            this.UpdateOrderStateAsync(orderNumber, acessToken, null);
        }

        /// <remarks/>
        public void UpdateOrderStateAsync(string orderNumber, string acessToken, object userState)
        {
            if ((this.UpdateOrderStateOperationCompleted == null))
            {
                this.UpdateOrderStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOrderStateOperationCompleted);
            }
            this.InvokeAsync("UpdateOrderState", new object[] {
                        orderNumber,
                        acessToken}, this.UpdateOrderStateOperationCompleted, userState);
        }

        private void OnUpdateOrderStateOperationCompleted(object arg)
        {
            if ((this.UpdateOrderStateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOrderStateCompleted(this, new UpdateOrderStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/SendContact", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SendContact([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string ContactInfo, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", IsNullable = true)] byte[] fileData, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sourceFileName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("SendContact", new object[] {
                        ContactInfo,
                        fileData,
                        sourceFileName,
                        accessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSendContact(string ContactInfo, byte[] fileData, string sourceFileName, string accessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SendContact", new object[] {
                        ContactInfo,
                        fileData,
                        sourceFileName,
                        accessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSendContact(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SendContactAsync(string ContactInfo, byte[] fileData, string sourceFileName, string accessToken)
        {
            this.SendContactAsync(ContactInfo, fileData, sourceFileName, accessToken, null);
        }

        /// <remarks/>
        public void SendContactAsync(string ContactInfo, byte[] fileData, string sourceFileName, string accessToken, object userState)
        {
            if ((this.SendContactOperationCompleted == null))
            {
                this.SendContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendContactOperationCompleted);
            }
            this.InvokeAsync("SendContact", new object[] {
                        ContactInfo,
                        fileData,
                        sourceFileName,
                        accessToken}, this.SendContactOperationCompleted, userState);
        }

        private void OnSendContactOperationCompleted(object arg)
        {
            if ((this.SendContactCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendContactCompleted(this, new SendContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/GetContactFeedbackInfo", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetContactFeedbackInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string itemCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("GetContactFeedbackInfo", new object[] {
                        itemCode,
                        accessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetContactFeedbackInfo(string itemCode, string accessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetContactFeedbackInfo", new object[] {
                        itemCode,
                        accessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetContactFeedbackInfo(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetContactFeedbackInfoAsync(string itemCode, string accessToken)
        {
            this.GetContactFeedbackInfoAsync(itemCode, accessToken, null);
        }

        /// <remarks/>
        public void GetContactFeedbackInfoAsync(string itemCode, string accessToken, object userState)
        {
            if ((this.GetContactFeedbackInfoOperationCompleted == null))
            {
                this.GetContactFeedbackInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContactFeedbackInfoOperationCompleted);
            }
            this.InvokeAsync("GetContactFeedbackInfo", new object[] {
                        itemCode,
                        accessToken}, this.GetContactFeedbackInfoOperationCompleted, userState);
        }

        private void OnGetContactFeedbackInfoOperationCompleted(object arg)
        {
            if ((this.GetContactFeedbackInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContactFeedbackInfoCompleted(this, new GetContactFeedbackInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/CheckInstrumentVersion", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CheckInstrumentVersion([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string CurrentVersion, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("CheckInstrumentVersion", new object[] {
                        CurrentVersion,
                        acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckInstrumentVersion(string CurrentVersion, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckInstrumentVersion", new object[] {
                        CurrentVersion,
                        acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckInstrumentVersion(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckInstrumentVersionAsync(string CurrentVersion, string acessToken)
        {
            this.CheckInstrumentVersionAsync(CurrentVersion, acessToken, null);
        }

        /// <remarks/>
        public void CheckInstrumentVersionAsync(string CurrentVersion, string acessToken, object userState)
        {
            if ((this.CheckInstrumentVersionOperationCompleted == null))
            {
                this.CheckInstrumentVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInstrumentVersionOperationCompleted);
            }
            this.InvokeAsync("CheckInstrumentVersion", new object[] {
                        CurrentVersion,
                        acessToken}, this.CheckInstrumentVersionOperationCompleted, userState);
        }

        private void OnCheckInstrumentVersionOperationCompleted(object arg)
        {
            if ((this.CheckInstrumentVersionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInstrumentVersionCompleted(this, new CheckInstrumentVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EbusinessService/LoginValidate", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string LoginValidate([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string account, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string pwd)
        {
            object[] results = this.Invoke("LoginValidate", new object[] {
                        account,
                        pwd});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLoginValidate(string account, string pwd, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("LoginValidate", new object[] {
                        account,
                        pwd}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLoginValidate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoginValidateAsync(string account, string pwd)
        {
            this.LoginValidateAsync(account, pwd, null);
        }

        /// <remarks/>
        public void LoginValidateAsync(string account, string pwd, object userState)
        {
            if ((this.LoginValidateOperationCompleted == null))
            {
                this.LoginValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginValidateOperationCompleted);
            }
            this.InvokeAsync("LoginValidate", new object[] {
                        account,
                        pwd}, this.LoginValidateOperationCompleted, userState);
        }

        private void OnLoginValidateOperationCompleted(object arg)
        {
            if ((this.LoginValidateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginValidateCompleted(this, new LoginValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SyncAccountToCustomerPortalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DeleteAccountInCustomerPortalCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendOrderCompletedEventHandler(object sender, SendOrderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SendOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void UpdateOrderStateCompletedEventHandler(object sender, UpdateOrderStateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOrderStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UpdateOrderStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendContactCompletedEventHandler(object sender, SendContactCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SendContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetContactFeedbackInfoCompletedEventHandler(object sender, GetContactFeedbackInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContactFeedbackInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetContactFeedbackInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void CheckInstrumentVersionCompletedEventHandler(object sender, CheckInstrumentVersionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInstrumentVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckInstrumentVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LoginValidateCompletedEventHandler(object sender, LoginValidateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoginValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
