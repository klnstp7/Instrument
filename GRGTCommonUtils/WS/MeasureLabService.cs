//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1022
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace GRGTCommonUtils.WS.MeasureLab
{//------------------------------------------------------------------------------
    // <auto-generated>
    //     此代码由工具生成。
    //     运行时版本:4.0.30319.42000
    //
    //     对此文件的更改可能会导致不正确的行为，并且如果
    //     重新生成代码，这些更改将会丢失。
    // </auto-generated>
    //------------------------------------------------------------------------------

    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MeasureLabService", Namespace = "http://tempuri.org/")]
    public partial class MeasureLabService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GetTopNByTypeOperationCompleted;

        private System.Threading.SendOrPostCallback SendInstrumentDataOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteInstrumentDataOperationCompleted;

        private System.Threading.SendOrPostCallback SynchBillDataOperationCompleted;

        private System.Threading.SendOrPostCallback SynchPayDataOperationCompleted;

        private System.Threading.SendOrPostCallback GetQuotationOperationCompleted;

        private System.Threading.SendOrPostCallback GetQuotationProjectsOperationCompleted;

        private System.Threading.SendOrPostCallback GetQuotationProjectOperationCompleted;

        private System.Threading.SendOrPostCallback GetQuotationProjectCountOperationCompleted;

        private System.Threading.SendOrPostCallback GetReportOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderProjectsOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderProjectOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrderProjectCountOperationCompleted;

        private System.Threading.SendOrPostCallback GetAttachmentOperationCompleted;

        private System.Threading.SendOrPostCallback GetParamsByCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetAttachmentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetAttachmentCountOperationCompleted;

        /// <remarks/>
        public MeasureLabService()
        {
            this.Url = "http://172.18.0.50:8003/Lab/Measure";
        }

        /// <remarks/>
        public event GetTopNByTypeCompletedEventHandler GetTopNByTypeCompleted;

        /// <remarks/>
        public event SendInstrumentDataCompletedEventHandler SendInstrumentDataCompleted;

        /// <remarks/>
        public event DeleteInstrumentDataCompletedEventHandler DeleteInstrumentDataCompleted;

        /// <remarks/>
        public event SynchBillDataCompletedEventHandler SynchBillDataCompleted;

        /// <remarks/>
        public event SynchPayDataCompletedEventHandler SynchPayDataCompleted;

        /// <remarks/>
        public event GetQuotationCompletedEventHandler GetQuotationCompleted;

        /// <remarks/>
        public event GetQuotationProjectsCompletedEventHandler GetQuotationProjectsCompleted;

        /// <remarks/>
        public event GetQuotationProjectCompletedEventHandler GetQuotationProjectCompleted;

        /// <remarks/>
        public event GetQuotationProjectCountCompletedEventHandler GetQuotationProjectCountCompleted;

        /// <remarks/>
        public event GetReportCompletedEventHandler GetReportCompleted;

        /// <remarks/>
        public event GetOrderCompletedEventHandler GetOrderCompleted;

        /// <remarks/>
        public event GetOrderProjectsCompletedEventHandler GetOrderProjectsCompleted;

        /// <remarks/>
        public event GetOrderProjectCompletedEventHandler GetOrderProjectCompleted;

        /// <remarks/>
        public event GetOrderProjectCountCompletedEventHandler GetOrderProjectCountCompleted;

        /// <remarks/>
        public event GetAttachmentCompletedEventHandler GetAttachmentCompleted;

        /// <remarks/>
        public event GetParamsByCodeCompletedEventHandler GetParamsByCodeCompleted;

        /// <remarks/>
        public event GetAttachmentsCompletedEventHandler GetAttachmentsCompleted;

        /// <remarks/>
        public event GetAttachmentCountCompletedEventHandler GetAttachmentCountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetTopNByType", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetTopNByType(int topN, [System.Xml.Serialization.XmlIgnoreAttribute()] bool topNSpecified, int taskType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool taskTypeSpecified)
        {
            object[] results = this.Invoke("GetTopNByType", new object[] {
                    topN,
                    topNSpecified,
                    taskType,
                    taskTypeSpecified});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetTopNByType(int topN, bool topNSpecified, int taskType, bool taskTypeSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetTopNByType", new object[] {
                    topN,
                    topNSpecified,
                    taskType,
                    taskTypeSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetTopNByType(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetTopNByTypeAsync(int topN, bool topNSpecified, int taskType, bool taskTypeSpecified)
        {
            this.GetTopNByTypeAsync(topN, topNSpecified, taskType, taskTypeSpecified, null);
        }

        /// <remarks/>
        public void GetTopNByTypeAsync(int topN, bool topNSpecified, int taskType, bool taskTypeSpecified, object userState)
        {
            if ((this.GetTopNByTypeOperationCompleted == null))
            {
                this.GetTopNByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTopNByTypeOperationCompleted);
            }
            this.InvokeAsync("GetTopNByType", new object[] {
                    topN,
                    topNSpecified,
                    taskType,
                    taskTypeSpecified}, this.GetTopNByTypeOperationCompleted, userState);
        }

        private void OnGetTopNByTypeOperationCompleted(object arg)
        {
            if ((this.GetTopNByTypeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTopNByTypeCompleted(this, new GetTopNByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/SendInstrumentData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SendInstrumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string instrumentJsonData)
        {
            object[] results = this.Invoke("SendInstrumentData", new object[] {
                    instrumentJsonData});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSendInstrumentData(string instrumentJsonData, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SendInstrumentData", new object[] {
                    instrumentJsonData}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSendInstrumentData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SendInstrumentDataAsync(string instrumentJsonData)
        {
            this.SendInstrumentDataAsync(instrumentJsonData, null);
        }

        /// <remarks/>
        public void SendInstrumentDataAsync(string instrumentJsonData, object userState)
        {
            if ((this.SendInstrumentDataOperationCompleted == null))
            {
                this.SendInstrumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInstrumentDataOperationCompleted);
            }
            this.InvokeAsync("SendInstrumentData", new object[] {
                    instrumentJsonData}, this.SendInstrumentDataOperationCompleted, userState);
        }

        private void OnSendInstrumentDataOperationCompleted(object arg)
        {
            if ((this.SendInstrumentDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInstrumentDataCompleted(this, new SendInstrumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/DeleteInstrumentData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string DeleteInstrumentData([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string itemCode, int recordState, [System.Xml.Serialization.XmlIgnoreAttribute()] bool recordStateSpecified)
        {
            object[] results = this.Invoke("DeleteInstrumentData", new object[] {
                    itemCode,
                    recordState,
                    recordStateSpecified});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteInstrumentData(string itemCode, int recordState, bool recordStateSpecified, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteInstrumentData", new object[] {
                    itemCode,
                    recordState,
                    recordStateSpecified}, callback, asyncState);
        }

        /// <remarks/>
        public string EndDeleteInstrumentData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void DeleteInstrumentDataAsync(string itemCode, int recordState, bool recordStateSpecified)
        {
            this.DeleteInstrumentDataAsync(itemCode, recordState, recordStateSpecified, null);
        }

        /// <remarks/>
        public void DeleteInstrumentDataAsync(string itemCode, int recordState, bool recordStateSpecified, object userState)
        {
            if ((this.DeleteInstrumentDataOperationCompleted == null))
            {
                this.DeleteInstrumentDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInstrumentDataOperationCompleted);
            }
            this.InvokeAsync("DeleteInstrumentData", new object[] {
                    itemCode,
                    recordState,
                    recordStateSpecified}, this.DeleteInstrumentDataOperationCompleted, userState);
        }

        private void OnDeleteInstrumentDataOperationCompleted(object arg)
        {
            if ((this.DeleteInstrumentDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInstrumentDataCompleted(this, new DeleteInstrumentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/SynchBillData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SynchBillData(string orderNumber, int billState, decimal billAmount)
        {
            object[] results = this.Invoke("SynchBillData", new object[] {
                    orderNumber,
                    billState,
                    billAmount});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSynchBillData(string orderNumber, int billState, decimal billAmount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SynchBillData", new object[] {
                    orderNumber,
                    billState,
                    billAmount}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSynchBillData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SynchBillDataAsync(string orderNumber, int billState, decimal billAmount)
        {
            this.SynchBillDataAsync(orderNumber, billState, billAmount, null);
        }

        /// <remarks/>
        public void SynchBillDataAsync(string orderNumber, int billState, decimal billAmount, object userState)
        {
            if ((this.SynchBillDataOperationCompleted == null))
            {
                this.SynchBillDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchBillDataOperationCompleted);
            }
            this.InvokeAsync("SynchBillData", new object[] {
                    orderNumber,
                    billState,
                    billAmount}, this.SynchBillDataOperationCompleted, userState);
        }

        private void OnSynchBillDataOperationCompleted(object arg)
        {
            if ((this.SynchBillDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchBillDataCompleted(this, new SynchBillDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/SynchPayData", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SynchPayData(string orderNumber, int verifyState, decimal verifyAmount)
        {
            object[] results = this.Invoke("SynchPayData", new object[] {
                    orderNumber,
                    verifyState,
                    verifyAmount});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSynchPayData(string orderNumber, int verifyState, decimal verifyAmount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SynchPayData", new object[] {
                    orderNumber,
                    verifyState,
                    verifyAmount}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSynchPayData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SynchPayDataAsync(string orderNumber, int verifyState, decimal verifyAmount)
        {
            this.SynchPayDataAsync(orderNumber, verifyState, verifyAmount, null);
        }

        /// <remarks/>
        public void SynchPayDataAsync(string orderNumber, int verifyState, decimal verifyAmount, object userState)
        {
            if ((this.SynchPayDataOperationCompleted == null))
            {
                this.SynchPayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchPayDataOperationCompleted);
            }
            this.InvokeAsync("SynchPayData", new object[] {
                    orderNumber,
                    verifyState,
                    verifyAmount}, this.SynchPayDataOperationCompleted, userState);
        }

        private void OnSynchPayDataOperationCompleted(object arg)
        {
            if ((this.SynchPayDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchPayDataCompleted(this, new SynchPayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetQuotation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQuotation(string quotationId)
        {
            object[] results = this.Invoke("GetQuotation", new object[] {
                    quotationId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQuotation(string quotationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQuotation", new object[] {
                    quotationId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetQuotation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetQuotationAsync(string quotationId)
        {
            this.GetQuotationAsync(quotationId, null);
        }

        /// <remarks/>
        public void GetQuotationAsync(string quotationId, object userState)
        {
            if ((this.GetQuotationOperationCompleted == null))
            {
                this.GetQuotationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotationOperationCompleted);
            }
            this.InvokeAsync("GetQuotation", new object[] {
                    quotationId}, this.GetQuotationOperationCompleted, userState);
        }

        private void OnGetQuotationOperationCompleted(object arg)
        {
            if ((this.GetQuotationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotationCompleted(this, new GetQuotationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetQuotationProjects", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQuotationProjects(string quotationId)
        {
            object[] results = this.Invoke("GetQuotationProjects", new object[] {
                    quotationId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQuotationProjects(string quotationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQuotationProjects", new object[] {
                    quotationId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetQuotationProjects(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetQuotationProjectsAsync(string quotationId)
        {
            this.GetQuotationProjectsAsync(quotationId, null);
        }

        /// <remarks/>
        public void GetQuotationProjectsAsync(string quotationId, object userState)
        {
            if ((this.GetQuotationProjectsOperationCompleted == null))
            {
                this.GetQuotationProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotationProjectsOperationCompleted);
            }
            this.InvokeAsync("GetQuotationProjects", new object[] {
                    quotationId}, this.GetQuotationProjectsOperationCompleted, userState);
        }

        private void OnGetQuotationProjectsOperationCompleted(object arg)
        {
            if ((this.GetQuotationProjectsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotationProjectsCompleted(this, new GetQuotationProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetQuotationProject", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetQuotationProject(string projectId)
        {
            object[] results = this.Invoke("GetQuotationProject", new object[] {
                    projectId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQuotationProject(string projectId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQuotationProject", new object[] {
                    projectId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetQuotationProject(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetQuotationProjectAsync(string projectId)
        {
            this.GetQuotationProjectAsync(projectId, null);
        }

        /// <remarks/>
        public void GetQuotationProjectAsync(string projectId, object userState)
        {
            if ((this.GetQuotationProjectOperationCompleted == null))
            {
                this.GetQuotationProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotationProjectOperationCompleted);
            }
            this.InvokeAsync("GetQuotationProject", new object[] {
                    projectId}, this.GetQuotationProjectOperationCompleted, userState);
        }

        private void OnGetQuotationProjectOperationCompleted(object arg)
        {
            if ((this.GetQuotationProjectCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotationProjectCompleted(this, new GetQuotationProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetQuotationProjectCount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetQuotationProjectCount(string quotationId)
        {
            object[] results = this.Invoke("GetQuotationProjectCount", new object[] {
                    quotationId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetQuotationProjectCount(string quotationId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetQuotationProjectCount", new object[] {
                    quotationId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetQuotationProjectCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetQuotationProjectCountAsync(string quotationId)
        {
            this.GetQuotationProjectCountAsync(quotationId, null);
        }

        /// <remarks/>
        public void GetQuotationProjectCountAsync(string quotationId, object userState)
        {
            if ((this.GetQuotationProjectCountOperationCompleted == null))
            {
                this.GetQuotationProjectCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQuotationProjectCountOperationCompleted);
            }
            this.InvokeAsync("GetQuotationProjectCount", new object[] {
                    quotationId}, this.GetQuotationProjectCountOperationCompleted, userState);
        }

        private void OnGetQuotationProjectCountOperationCompleted(object arg)
        {
            if ((this.GetQuotationProjectCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQuotationProjectCountCompleted(this, new GetQuotationProjectCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetReport", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetReport(string reportId)
        {
            object[] results = this.Invoke("GetReport", new object[] {
                    reportId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetReport(string reportId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetReport", new object[] {
                    reportId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetReport(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetReportAsync(string reportId)
        {
            this.GetReportAsync(reportId, null);
        }

        /// <remarks/>
        public void GetReportAsync(string reportId, object userState)
        {
            if ((this.GetReportOperationCompleted == null))
            {
                this.GetReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportOperationCompleted);
            }
            this.InvokeAsync("GetReport", new object[] {
                    reportId}, this.GetReportOperationCompleted, userState);
        }

        private void OnGetReportOperationCompleted(object arg)
        {
            if ((this.GetReportCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportCompleted(this, new GetReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetOrder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrder(string orderId)
        {
            object[] results = this.Invoke("GetOrder", new object[] {
                    orderId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOrder(string orderId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOrder", new object[] {
                    orderId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetOrder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrderAsync(string orderId)
        {
            this.GetOrderAsync(orderId, null);
        }

        /// <remarks/>
        public void GetOrderAsync(string orderId, object userState)
        {
            if ((this.GetOrderOperationCompleted == null))
            {
                this.GetOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderOperationCompleted);
            }
            this.InvokeAsync("GetOrder", new object[] {
                    orderId}, this.GetOrderOperationCompleted, userState);
        }

        private void OnGetOrderOperationCompleted(object arg)
        {
            if ((this.GetOrderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderCompleted(this, new GetOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetOrderProjects", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrderProjects(string orderId)
        {
            object[] results = this.Invoke("GetOrderProjects", new object[] {
                    orderId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOrderProjects(string orderId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOrderProjects", new object[] {
                    orderId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetOrderProjects(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrderProjectsAsync(string orderId)
        {
            this.GetOrderProjectsAsync(orderId, null);
        }

        /// <remarks/>
        public void GetOrderProjectsAsync(string orderId, object userState)
        {
            if ((this.GetOrderProjectsOperationCompleted == null))
            {
                this.GetOrderProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderProjectsOperationCompleted);
            }
            this.InvokeAsync("GetOrderProjects", new object[] {
                    orderId}, this.GetOrderProjectsOperationCompleted, userState);
        }

        private void OnGetOrderProjectsOperationCompleted(object arg)
        {
            if ((this.GetOrderProjectsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderProjectsCompleted(this, new GetOrderProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetOrderProject", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrderProject(string projectId)
        {
            object[] results = this.Invoke("GetOrderProject", new object[] {
                    projectId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOrderProject(string projectId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOrderProject", new object[] {
                    projectId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetOrderProject(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrderProjectAsync(string projectId)
        {
            this.GetOrderProjectAsync(projectId, null);
        }

        /// <remarks/>
        public void GetOrderProjectAsync(string projectId, object userState)
        {
            if ((this.GetOrderProjectOperationCompleted == null))
            {
                this.GetOrderProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderProjectOperationCompleted);
            }
            this.InvokeAsync("GetOrderProject", new object[] {
                    projectId}, this.GetOrderProjectOperationCompleted, userState);
        }

        private void OnGetOrderProjectOperationCompleted(object arg)
        {
            if ((this.GetOrderProjectCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderProjectCompleted(this, new GetOrderProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetOrderProjectCount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetOrderProjectCount(string orderId)
        {
            object[] results = this.Invoke("GetOrderProjectCount", new object[] {
                    orderId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOrderProjectCount(string orderId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOrderProjectCount", new object[] {
                    orderId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetOrderProjectCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetOrderProjectCountAsync(string orderId)
        {
            this.GetOrderProjectCountAsync(orderId, null);
        }

        /// <remarks/>
        public void GetOrderProjectCountAsync(string orderId, object userState)
        {
            if ((this.GetOrderProjectCountOperationCompleted == null))
            {
                this.GetOrderProjectCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderProjectCountOperationCompleted);
            }
            this.InvokeAsync("GetOrderProjectCount", new object[] {
                    orderId}, this.GetOrderProjectCountOperationCompleted, userState);
        }

        private void OnGetOrderProjectCountOperationCompleted(object arg)
        {
            if ((this.GetOrderProjectCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderProjectCountCompleted(this, new GetOrderProjectCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetAttachment", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachment(string fileId)
        {
            object[] results = this.Invoke("GetAttachment", new object[] {
                    fileId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAttachment(string fileId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAttachment", new object[] {
                    fileId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAttachment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAttachmentAsync(string fileId)
        {
            this.GetAttachmentAsync(fileId, null);
        }

        /// <remarks/>
        public void GetAttachmentAsync(string fileId, object userState)
        {
            if ((this.GetAttachmentOperationCompleted == null))
            {
                this.GetAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetAttachment", new object[] {
                    fileId}, this.GetAttachmentOperationCompleted, userState);
        }

        private void OnGetAttachmentOperationCompleted(object arg)
        {
            if ((this.GetAttachmentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentCompleted(this, new GetAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetParamsByCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetParamsByCode(string paramCodeList)
        {
            object[] results = this.Invoke("GetParamsByCode", new object[] {
                    paramCodeList});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetParamsByCode(string paramCodeList, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetParamsByCode", new object[] {
                    paramCodeList}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetParamsByCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetParamsByCodeAsync(string paramCodeList)
        {
            this.GetParamsByCodeAsync(paramCodeList, null);
        }

        /// <remarks/>
        public void GetParamsByCodeAsync(string paramCodeList, object userState)
        {
            if ((this.GetParamsByCodeOperationCompleted == null))
            {
                this.GetParamsByCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParamsByCodeOperationCompleted);
            }
            this.InvokeAsync("GetParamsByCode", new object[] {
                    paramCodeList}, this.GetParamsByCodeOperationCompleted, userState);
        }

        private void OnGetParamsByCodeOperationCompleted(object arg)
        {
            if ((this.GetParamsByCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParamsByCodeCompleted(this, new GetParamsByCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetAttachments", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAttachments(string businessTypeList, string businessKeyId)
        {
            object[] results = this.Invoke("GetAttachments", new object[] {
                    businessTypeList,
                    businessKeyId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAttachments(string businessTypeList, string businessKeyId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAttachments", new object[] {
                    businessTypeList,
                    businessKeyId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetAttachments(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetAttachmentsAsync(string businessTypeList, string businessKeyId)
        {
            this.GetAttachmentsAsync(businessTypeList, businessKeyId, null);
        }

        /// <remarks/>
        public void GetAttachmentsAsync(string businessTypeList, string businessKeyId, object userState)
        {
            if ((this.GetAttachmentsOperationCompleted == null))
            {
                this.GetAttachmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentsOperationCompleted);
            }
            this.InvokeAsync("GetAttachments", new object[] {
                    businessTypeList,
                    businessKeyId}, this.GetAttachmentsOperationCompleted, userState);
        }

        private void OnGetAttachmentsOperationCompleted(object arg)
        {
            if ((this.GetAttachmentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentsCompleted(this, new GetAttachmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureService/GetAttachmentCount", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAttachmentCount(string businessTypeList, string businessKeyId)
        {
            object[] results = this.Invoke("GetAttachmentCount", new object[] {
                    businessTypeList,
                    businessKeyId});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetAttachmentCount(string businessTypeList, string businessKeyId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetAttachmentCount", new object[] {
                    businessTypeList,
                    businessKeyId}, callback, asyncState);
        }

        /// <remarks/>
        public int EndGetAttachmentCount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void GetAttachmentCountAsync(string businessTypeList, string businessKeyId)
        {
            this.GetAttachmentCountAsync(businessTypeList, businessKeyId, null);
        }

        /// <remarks/>
        public void GetAttachmentCountAsync(string businessTypeList, string businessKeyId, object userState)
        {
            if ((this.GetAttachmentCountOperationCompleted == null))
            {
                this.GetAttachmentCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAttachmentCountOperationCompleted);
            }
            this.InvokeAsync("GetAttachmentCount", new object[] {
                    businessTypeList,
                    businessKeyId}, this.GetAttachmentCountOperationCompleted, userState);
        }

        private void OnGetAttachmentCountOperationCompleted(object arg)
        {
            if ((this.GetAttachmentCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAttachmentCountCompleted(this, new GetAttachmentCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MeasureExternalService", Namespace = "http://tempuri.org/")]
    public partial class MeasureExternalService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback DownloadCertificationOperationCompleted;

        private System.Threading.SendOrPostCallback OrderSearchOperationCompleted;

        private System.Threading.SendOrPostCallback GetParamItemListOperationCompleted;

        private System.Threading.SendOrPostCallback OrderInstrumentSearchOperationCompleted;

        private System.Threading.SendOrPostCallback GetCertInfoByQuotationNumberOperationCompleted;

        private System.Threading.SendOrPostCallback GetCertInfoByCertificateNumberOperationCompleted;

        private System.Threading.SendOrPostCallback BatchDownloadCertificationOperationCompleted;

        private System.Threading.SendOrPostCallback BatchDownloadCertification2OperationCompleted;

        private System.Threading.SendOrPostCallback QuotationInstrumentSearchOperationCompleted;

        private System.Threading.SendOrPostCallback GetCertListForPageOperationCompleted;

        /// <remarks/>
        public MeasureExternalService()
        {
            this.Url = "http://172.18.0.50:8003/Lab/Measure";
        }

        /// <remarks/>
        public event DownloadCertificationCompletedEventHandler DownloadCertificationCompleted;

        /// <remarks/>
        public event OrderSearchCompletedEventHandler OrderSearchCompleted;

        /// <remarks/>
        public event GetParamItemListCompletedEventHandler GetParamItemListCompleted;

        /// <remarks/>
        public event OrderInstrumentSearchCompletedEventHandler OrderInstrumentSearchCompleted;

        /// <remarks/>
        public event GetCertInfoByQuotationNumberCompletedEventHandler GetCertInfoByQuotationNumberCompleted;

        /// <remarks/>
        public event GetCertInfoByCertificateNumberCompletedEventHandler GetCertInfoByCertificateNumberCompleted;

        /// <remarks/>
        public event BatchDownloadCertificationCompletedEventHandler BatchDownloadCertificationCompleted;

        /// <remarks/>
        public event BatchDownloadCertification2CompletedEventHandler BatchDownloadCertification2Completed;

        /// <remarks/>
        public event QuotationInstrumentSearchCompletedEventHandler QuotationInstrumentSearchCompleted;

        /// <remarks/>
        public event GetCertListForPageCompletedEventHandler GetCertListForPageCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/DownloadCertification", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", IsNullable = true)]
        public byte[] DownloadCertification([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string certificateNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("DownloadCertification", new object[] {
                    certificateNumber,
                    accessToken});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/GetKnowledgeTypeList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetKnowledgeTypeList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("GetKnowledgeTypeList", new object[] {
                    accessToken});
            return ((string)(results[0]));
        }
        /// <remarks/>
        public System.IAsyncResult BeginDownloadCertification(string certificateNumber, string accessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DownloadCertification", new object[] {
                    certificateNumber,
                    accessToken}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndDownloadCertification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void DownloadCertificationAsync(string certificateNumber, string accessToken)
        {
            this.DownloadCertificationAsync(certificateNumber, accessToken, null);
        }

        /// <remarks/>
        public void DownloadCertificationAsync(string certificateNumber, string accessToken, object userState)
        {
            if ((this.DownloadCertificationOperationCompleted == null))
            {
                this.DownloadCertificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadCertificationOperationCompleted);
            }
            this.InvokeAsync("DownloadCertification", new object[] {
                    certificateNumber,
                    accessToken}, this.DownloadCertificationOperationCompleted, userState);
        }

        private void OnDownloadCertificationOperationCompleted(object arg)
        {
            if ((this.DownloadCertificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadCertificationCompleted(this, new DownloadCertificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/OrderSearch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string OrderSearch([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string endDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("OrderSearch", new object[] {
                    startDate,
                    endDate,
                    accessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginOrderSearch(string startDate, string endDate, string accessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("OrderSearch", new object[] {
                    startDate,
                    endDate,
                    accessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndOrderSearch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void OrderSearchAsync(string startDate, string endDate, string accessToken)
        {
            this.OrderSearchAsync(startDate, endDate, accessToken, null);
        }

        /// <remarks/>
        public void OrderSearchAsync(string startDate, string endDate, string accessToken, object userState)
        {
            if ((this.OrderSearchOperationCompleted == null))
            {
                this.OrderSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderSearchOperationCompleted);
            }
            this.InvokeAsync("OrderSearch", new object[] {
                    startDate,
                    endDate,
                    accessToken}, this.OrderSearchOperationCompleted, userState);
        }

        private void OnOrderSearchOperationCompleted(object arg)
        {
            if ((this.OrderSearchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderSearchCompleted(this, new OrderSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }


        /// <remarks/>
        public System.IAsyncResult BeginGetParamItemList(System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetParamItemList", new object[0], callback, asyncState);
        }

        /// <remarks/>
        public string EndGetParamItemList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetParamItemListAsync()
        {
            this.GetParamItemListAsync(null);
        }

        /// <remarks/>
        public void GetParamItemListAsync(object userState)
        {
            if ((this.GetParamItemListOperationCompleted == null))
            {
                this.GetParamItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParamItemListOperationCompleted);
            }
            this.InvokeAsync("GetParamItemList", new object[0], this.GetParamItemListOperationCompleted, userState);
        }

        private void OnGetParamItemListOperationCompleted(object arg)
        {
            if ((this.GetParamItemListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParamItemListCompleted(this, new GetParamItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/OrderInstrumentSearch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string OrderInstrumentSearch([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToken)
        {
            object[] results = this.Invoke("OrderInstrumentSearch", new object[] {
                    orderNumber,
                    accessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginOrderInstrumentSearch(string orderNumber, string accessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("OrderInstrumentSearch", new object[] {
                    orderNumber,
                    accessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndOrderInstrumentSearch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void OrderInstrumentSearchAsync(string orderNumber, string accessToken)
        {
            this.OrderInstrumentSearchAsync(orderNumber, accessToken, null);
        }

        /// <remarks/>
        public void OrderInstrumentSearchAsync(string orderNumber, string accessToken, object userState)
        {
            if ((this.OrderInstrumentSearchOperationCompleted == null))
            {
                this.OrderInstrumentSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrderInstrumentSearchOperationCompleted);
            }
            this.InvokeAsync("OrderInstrumentSearch", new object[] {
                    orderNumber,
                    accessToken}, this.OrderInstrumentSearchOperationCompleted, userState);
        }

        private void OnOrderInstrumentSearchOperationCompleted(object arg)
        {
            if ((this.OrderInstrumentSearchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrderInstrumentSearchCompleted(this, new OrderInstrumentSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/GetCertInfoByQuotationNumber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCertInfoByQuotationNumber([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string quotationNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("GetCertInfoByQuotationNumber", new object[] {
                    quotationNumber,
                    acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCertInfoByQuotationNumber(string quotationNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCertInfoByQuotationNumber", new object[] {
                    quotationNumber,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCertInfoByQuotationNumber(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCertInfoByQuotationNumberAsync(string quotationNumber, string acessToken)
        {
            this.GetCertInfoByQuotationNumberAsync(quotationNumber, acessToken, null);
        }

        /// <remarks/>
        public void GetCertInfoByQuotationNumberAsync(string quotationNumber, string acessToken, object userState)
        {
            if ((this.GetCertInfoByQuotationNumberOperationCompleted == null))
            {
                this.GetCertInfoByQuotationNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertInfoByQuotationNumberOperationCompleted);
            }
            this.InvokeAsync("GetCertInfoByQuotationNumber", new object[] {
                    quotationNumber,
                    acessToken}, this.GetCertInfoByQuotationNumberOperationCompleted, userState);
        }

        private void OnGetCertInfoByQuotationNumberOperationCompleted(object arg)
        {
            if ((this.GetCertInfoByQuotationNumberCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertInfoByQuotationNumberCompleted(this, new GetCertInfoByQuotationNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/GetCertInfoByCertificateNumber", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCertInfoByCertificateNumber([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string certificateNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("GetCertInfoByCertificateNumber", new object[] {
                    certificateNumber,
                    acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCertInfoByCertificateNumber(string certificateNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCertInfoByCertificateNumber", new object[] {
                    certificateNumber,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCertInfoByCertificateNumber(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCertInfoByCertificateNumberAsync(string certificateNumber, string acessToken)
        {
            this.GetCertInfoByCertificateNumberAsync(certificateNumber, acessToken, null);
        }

        /// <remarks/>
        public void GetCertInfoByCertificateNumberAsync(string certificateNumber, string acessToken, object userState)
        {
            if ((this.GetCertInfoByCertificateNumberOperationCompleted == null))
            {
                this.GetCertInfoByCertificateNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertInfoByCertificateNumberOperationCompleted);
            }
            this.InvokeAsync("GetCertInfoByCertificateNumber", new object[] {
                    certificateNumber,
                    acessToken}, this.GetCertInfoByCertificateNumberOperationCompleted, userState);
        }

        private void OnGetCertInfoByCertificateNumberOperationCompleted(object arg)
        {
            if ((this.GetCertInfoByCertificateNumberCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertInfoByCertificateNumberCompleted(this, new GetCertInfoByCertificateNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/BatchDownloadCertification", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", IsNullable = true)]
        public byte[] BatchDownloadCertification([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string grgtQuotationNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("BatchDownloadCertification", new object[] {
                    grgtQuotationNumber,
                    acessToken});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBatchDownloadCertification(string grgtQuotationNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BatchDownloadCertification", new object[] {
                    grgtQuotationNumber,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndBatchDownloadCertification(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void BatchDownloadCertificationAsync(string grgtQuotationNumber, string acessToken)
        {
            this.BatchDownloadCertificationAsync(grgtQuotationNumber, acessToken, null);
        }

        /// <remarks/>
        public void BatchDownloadCertificationAsync(string grgtQuotationNumber, string acessToken, object userState)
        {
            if ((this.BatchDownloadCertificationOperationCompleted == null))
            {
                this.BatchDownloadCertificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchDownloadCertificationOperationCompleted);
            }
            this.InvokeAsync("BatchDownloadCertification", new object[] {
                    grgtQuotationNumber,
                    acessToken}, this.BatchDownloadCertificationOperationCompleted, userState);
        }

        private void OnBatchDownloadCertificationOperationCompleted(object arg)
        {
            if ((this.BatchDownloadCertificationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchDownloadCertificationCompleted(this, new BatchDownloadCertificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/BatchDownloadCertification2", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary", IsNullable = true)]
        public byte[] BatchDownloadCertification2([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string grgtOrderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("BatchDownloadCertification2", new object[] {
                    grgtOrderNumber,
                    acessToken});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginBatchDownloadCertification2(string grgtOrderNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("BatchDownloadCertification2", new object[] {
                    grgtOrderNumber,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndBatchDownloadCertification2(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void BatchDownloadCertification2Async(string grgtOrderNumber, string acessToken)
        {
            this.BatchDownloadCertification2Async(grgtOrderNumber, acessToken, null);
        }

        /// <remarks/>
        public void BatchDownloadCertification2Async(string grgtOrderNumber, string acessToken, object userState)
        {
            if ((this.BatchDownloadCertification2OperationCompleted == null))
            {
                this.BatchDownloadCertification2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchDownloadCertification2OperationCompleted);
            }
            this.InvokeAsync("BatchDownloadCertification2", new object[] {
                    grgtOrderNumber,
                    acessToken}, this.BatchDownloadCertification2OperationCompleted, userState);
        }

        private void OnBatchDownloadCertification2OperationCompleted(object arg)
        {
            if ((this.BatchDownloadCertification2Completed != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchDownloadCertification2Completed(this, new BatchDownloadCertification2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/QuotationInstrumentSearch", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string QuotationInstrumentSearch([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string quotationNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("QuotationInstrumentSearch", new object[] {
                    quotationNumber,
                    acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginQuotationInstrumentSearch(string quotationNumber, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("QuotationInstrumentSearch", new object[] {
                    quotationNumber,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndQuotationInstrumentSearch(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void QuotationInstrumentSearchAsync(string quotationNumber, string acessToken)
        {
            this.QuotationInstrumentSearchAsync(quotationNumber, acessToken, null);
        }

        /// <remarks/>
        public void QuotationInstrumentSearchAsync(string quotationNumber, string acessToken, object userState)
        {
            if ((this.QuotationInstrumentSearchOperationCompleted == null))
            {
                this.QuotationInstrumentSearchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQuotationInstrumentSearchOperationCompleted);
            }
            this.InvokeAsync("QuotationInstrumentSearch", new object[] {
                    quotationNumber,
                    acessToken}, this.QuotationInstrumentSearchOperationCompleted, userState);
        }

        private void OnQuotationInstrumentSearchOperationCompleted(object arg)
        {
            if ((this.QuotationInstrumentSearchCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QuotationInstrumentSearchCompleted(this, new QuotationInstrumentSearchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureExternalService/GetCertListForPage", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCertListForPage([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] PagingModel paging, [System.Xml.Serialization.XmlArrayAttribute(IsNullable = true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace = "http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] fieldCondition, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string companyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string acessToken)
        {
            object[] results = this.Invoke("GetCertListForPage", new object[] {
                    paging,
                    fieldCondition,
                    companyCode,
                    acessToken});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCertListForPage(PagingModel paging, string[] fieldCondition, string companyCode, string acessToken, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCertListForPage", new object[] {
                    paging,
                    fieldCondition,
                    companyCode,
                    acessToken}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCertListForPage(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCertListForPageAsync(PagingModel paging, string[] fieldCondition, string companyCode, string acessToken)
        {
            this.GetCertListForPageAsync(paging, fieldCondition, companyCode, acessToken, null);
        }

        /// <remarks/>
        public void GetCertListForPageAsync(PagingModel paging, string[] fieldCondition, string companyCode, string acessToken, object userState)
        {
            if ((this.GetCertListForPageOperationCompleted == null))
            {
                this.GetCertListForPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertListForPageOperationCompleted);
            }
            this.InvokeAsync("GetCertListForPage", new object[] {
                    paging,
                    fieldCondition,
                    companyCode,
                    acessToken}, this.GetCertListForPageOperationCompleted, userState);
        }

        private void OnGetCertListForPageOperationCompleted(object arg)
        {
            if ((this.GetCertListForPageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertListForPageCompleted(this, new GetCertListForPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MeasureFlowService", Namespace = "http://tempuri.org/")]
    public partial class MeasureFlowService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback AuditWorkflowOperationCompleted;

        /// <remarks/>
        public MeasureFlowService()
        {
            this.Url = "http://172.18.0.50:8003/Lab/Measure";
        }

        /// <remarks/>
        public event AuditWorkflowCompletedEventHandler AuditWorkflowCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IMeasureFlowService/AuditWorkflow", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AuditWorkflow(string instanceId, int IsAuditPass, string auditRemark, string auditorJobNo)
        {
            object[] results = this.Invoke("AuditWorkflow", new object[] {
                    instanceId,
                    IsAuditPass,
                    auditRemark,
                    auditorJobNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAuditWorkflow(string instanceId, int IsAuditPass, string auditRemark, string auditorJobNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AuditWorkflow", new object[] {
                    instanceId,
                    IsAuditPass,
                    auditRemark,
                    auditorJobNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAuditWorkflow(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AuditWorkflowAsync(string instanceId, int IsAuditPass, string auditRemark, string auditorJobNo)
        {
            this.AuditWorkflowAsync(instanceId, IsAuditPass, auditRemark, auditorJobNo, null);
        }

        /// <remarks/>
        public void AuditWorkflowAsync(string instanceId, int IsAuditPass, string auditRemark, string auditorJobNo, object userState)
        {
            if ((this.AuditWorkflowOperationCompleted == null))
            {
                this.AuditWorkflowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuditWorkflowOperationCompleted);
            }
            this.InvokeAsync("AuditWorkflow", new object[] {
                    instanceId,
                    IsAuditPass,
                    auditRemark,
                    auditorJobNo}, this.AuditWorkflowOperationCompleted, userState);
        }

        private void OnAuditWorkflowOperationCompleted(object arg)
        {
            if ((this.AuditWorkflowCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuditWorkflowCompleted(this, new AuditWorkflowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/Global.Common.Models.WCF")]
    public partial class PagingModel
    {

        private string fieldOrderField;

        private int pageCurrentField;

        private int pageSizeField;

        private int recordCountField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string FieldOrder
        {
            get
            {
                return this.fieldOrderField;
            }
            set
            {
                this.fieldOrderField = value;
            }
        }

        /// <remarks/>
        public int PageCurrent
        {
            get
            {
                return this.pageCurrentField;
            }
            set
            {
                this.pageCurrentField = value;
            }
        }

        /// <remarks/>
        public int PageSize
        {
            get
            {
                return this.pageSizeField;
            }
            set
            {
                this.pageSizeField = value;
            }
        }

        /// <remarks/>
        public int RecordCount
        {
            get
            {
                return this.recordCountField;
            }
            set
            {
                this.recordCountField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetTopNByTypeCompletedEventHandler(object sender, GetTopNByTypeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTopNByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTopNByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendInstrumentDataCompletedEventHandler(object sender, SendInstrumentDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendInstrumentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SendInstrumentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DeleteInstrumentDataCompletedEventHandler(object sender, DeleteInstrumentDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteInstrumentDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteInstrumentDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SynchBillDataCompletedEventHandler(object sender, SynchBillDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SynchBillDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SynchBillDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SynchPayDataCompletedEventHandler(object sender, SynchPayDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SynchPayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SynchPayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQuotationCompletedEventHandler(object sender, GetQuotationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQuotationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQuotationProjectsCompletedEventHandler(object sender, GetQuotationProjectsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotationProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQuotationProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQuotationProjectCompletedEventHandler(object sender, GetQuotationProjectCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotationProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQuotationProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetQuotationProjectCountCompletedEventHandler(object sender, GetQuotationProjectCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQuotationProjectCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetQuotationProjectCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetReportCompletedEventHandler(object sender, GetReportCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrderCompletedEventHandler(object sender, GetOrderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrderProjectsCompletedEventHandler(object sender, GetOrderProjectsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrderProjectCompletedEventHandler(object sender, GetOrderProjectCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrderProjectCountCompletedEventHandler(object sender, GetOrderProjectCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderProjectCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrderProjectCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAttachmentCompletedEventHandler(object sender, GetAttachmentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetParamsByCodeCompletedEventHandler(object sender, GetParamsByCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParamsByCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetParamsByCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAttachmentsCompletedEventHandler(object sender, GetAttachmentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetAttachmentCountCompletedEventHandler(object sender, GetAttachmentCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAttachmentCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAttachmentCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void DownloadCertificationCompletedEventHandler(object sender, DownloadCertificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadCertificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DownloadCertificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void OrderSearchCompletedEventHandler(object sender, OrderSearchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OrderSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetParamItemListCompletedEventHandler(object sender, GetParamItemListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParamItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetParamItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void OrderInstrumentSearchCompletedEventHandler(object sender, OrderInstrumentSearchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrderInstrumentSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal OrderInstrumentSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCertInfoByQuotationNumberCompletedEventHandler(object sender, GetCertInfoByQuotationNumberCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertInfoByQuotationNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCertInfoByQuotationNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCertInfoByCertificateNumberCompletedEventHandler(object sender, GetCertInfoByCertificateNumberCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertInfoByCertificateNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCertInfoByCertificateNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void BatchDownloadCertificationCompletedEventHandler(object sender, BatchDownloadCertificationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchDownloadCertificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BatchDownloadCertificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void BatchDownloadCertification2CompletedEventHandler(object sender, BatchDownloadCertification2CompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchDownloadCertification2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal BatchDownloadCertification2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void QuotationInstrumentSearchCompletedEventHandler(object sender, QuotationInstrumentSearchCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QuotationInstrumentSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal QuotationInstrumentSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCertListForPageCompletedEventHandler(object sender, GetCertListForPageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertListForPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCertListForPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AuditWorkflowCompletedEventHandler(object sender, AuditWorkflowCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuditWorkflowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AuditWorkflowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}