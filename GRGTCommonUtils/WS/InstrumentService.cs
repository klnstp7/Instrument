//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1026
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace GRGTCommonUtils.WS.Instrument
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_InstrumentWCFServices", Namespace = "http://tempuri.org/")]
    public partial class InstrumentWCFServices : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback AppLoginOperationCompleted;

        private System.Threading.SendOrPostCallback GetBaseInfoByBarCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetInstrumentDetailByBarCodeOperationCompleted;

        private System.Threading.SendOrPostCallback GetInstrumentListOperationCompleted;

        private System.Threading.SendOrPostCallback InstrumentCheckOperationCompleted;

        private System.Threading.SendOrPostCallback AddInstrumentOperationCompleted;

        private System.Threading.SendOrPostCallback GetCirculationRecordListOperationCompleted;

        private System.Threading.SendOrPostCallback AddCirculationRecordOperationCompleted;

        private System.Threading.SendOrPostCallback GetCheckingPlanBaseInfoListOperationCompleted;

        private System.Threading.SendOrPostCallback GetPlanLsitOperationCompleted;

        private System.Threading.SendOrPostCallback GetCetificationListOperationCompleted;

        private System.Threading.SendOrPostCallback SendOrderOperationCompleted;

        private System.Threading.SendOrPostCallback GetInstrumentListByKeyWorksOperationCompleted;

        /// <remarks/>
        public InstrumentWCFServices()
        {
            this.Url = "http://localhost:8003/Instrument";
        }

        /// <remarks/>
        public event AppLoginCompletedEventHandler AppLoginCompleted;

        /// <remarks/>
        public event GetBaseInfoByBarCodeCompletedEventHandler GetBaseInfoByBarCodeCompleted;

        /// <remarks/>
        public event GetInstrumentDetailByBarCodeCompletedEventHandler GetInstrumentDetailByBarCodeCompleted;

        /// <remarks/>
        public event GetInstrumentListCompletedEventHandler GetInstrumentListCompleted;

        /// <remarks/>
        public event InstrumentCheckCompletedEventHandler InstrumentCheckCompleted;

        /// <remarks/>
        public event AddInstrumentCompletedEventHandler AddInstrumentCompleted;

        /// <remarks/>
        public event GetCirculationRecordListCompletedEventHandler GetCirculationRecordListCompleted;

        /// <remarks/>
        public event AddCirculationRecordCompletedEventHandler AddCirculationRecordCompleted;

        /// <remarks/>
        public event GetCheckingPlanBaseInfoListCompletedEventHandler GetCheckingPlanBaseInfoListCompleted;

        /// <remarks/>
        public event GetPlanLsitCompletedEventHandler GetPlanLsitCompleted;

        /// <remarks/>
        public event GetCetificationListCompletedEventHandler GetCetificationListCompleted;

        /// <remarks/>
        public event SendOrderCompletedEventHandler SendOrderCompleted;

        /// <remarks/>
        public event GetInstrumentListByKeyWorksCompletedEventHandler GetInstrumentListByKeyWorksCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/AppLogin", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AppLogin([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string JobNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginPwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("AppLogin", new object[] {
                    JobNo,
                    loginPwd,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAppLogin(string JobNo, string loginPwd, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AppLogin", new object[] {
                    JobNo,
                    loginPwd,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAppLogin(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AppLoginAsync(string JobNo, string loginPwd, string accessToKen)
        {
            this.AppLoginAsync(JobNo, loginPwd, accessToKen, null);
        }

        /// <remarks/>
        public void AppLoginAsync(string JobNo, string loginPwd, string accessToKen, object userState)
        {
            if ((this.AppLoginOperationCompleted == null))
            {
                this.AppLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAppLoginOperationCompleted);
            }
            this.InvokeAsync("AppLogin", new object[] {
                    JobNo,
                    loginPwd,
                    accessToKen}, this.AppLoginOperationCompleted, userState);
        }

        private void OnAppLoginOperationCompleted(object arg)
        {
            if ((this.AppLoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AppLoginCompleted(this, new AppLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetBaseInfoByBarCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetBaseInfoByBarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetBaseInfoByBarCode", new object[] {
                    barCode,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetBaseInfoByBarCode(string barCode, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetBaseInfoByBarCode", new object[] {
                    barCode,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetBaseInfoByBarCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetBaseInfoByBarCodeAsync(string barCode, string accessToKen)
        {
            this.GetBaseInfoByBarCodeAsync(barCode, accessToKen, null);
        }

        /// <remarks/>
        public void GetBaseInfoByBarCodeAsync(string barCode, string accessToKen, object userState)
        {
            if ((this.GetBaseInfoByBarCodeOperationCompleted == null))
            {
                this.GetBaseInfoByBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBaseInfoByBarCodeOperationCompleted);
            }
            this.InvokeAsync("GetBaseInfoByBarCode", new object[] {
                    barCode,
                    accessToKen}, this.GetBaseInfoByBarCodeOperationCompleted, userState);
        }

        private void OnGetBaseInfoByBarCodeOperationCompleted(object arg)
        {
            if ((this.GetBaseInfoByBarCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBaseInfoByBarCodeCompleted(this, new GetBaseInfoByBarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetInstrumentDetailByBarCode", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetInstrumentDetailByBarCode([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetInstrumentDetailByBarCode", new object[] {
                    barCode,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInstrumentDetailByBarCode(string barCode, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInstrumentDetailByBarCode", new object[] {
                    barCode,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInstrumentDetailByBarCode(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInstrumentDetailByBarCodeAsync(string barCode, string accessToKen)
        {
            this.GetInstrumentDetailByBarCodeAsync(barCode, accessToKen, null);
        }

        /// <remarks/>
        public void GetInstrumentDetailByBarCodeAsync(string barCode, string accessToKen, object userState)
        {
            if ((this.GetInstrumentDetailByBarCodeOperationCompleted == null))
            {
                this.GetInstrumentDetailByBarCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstrumentDetailByBarCodeOperationCompleted);
            }
            this.InvokeAsync("GetInstrumentDetailByBarCode", new object[] {
                    barCode,
                    accessToKen}, this.GetInstrumentDetailByBarCodeOperationCompleted, userState);
        }

        private void OnGetInstrumentDetailByBarCodeOperationCompleted(object arg)
        {
            if ((this.GetInstrumentDetailByBarCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstrumentDetailByBarCodeCompleted(this, new GetInstrumentDetailByBarCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetInstrumentList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetInstrumentList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string instrumentName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string specification, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string serialNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetInstrumentList", new object[] {
                    instrumentName,
                    specification,
                    serialNo,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInstrumentList(string instrumentName, string specification, string serialNo, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInstrumentList", new object[] {
                    instrumentName,
                    specification,
                    serialNo,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInstrumentList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInstrumentListAsync(string instrumentName, string specification, string serialNo, string accessToKen)
        {
            this.GetInstrumentListAsync(instrumentName, specification, serialNo, accessToKen, null);
        }

        /// <remarks/>
        public void GetInstrumentListAsync(string instrumentName, string specification, string serialNo, string accessToKen, object userState)
        {
            if ((this.GetInstrumentListOperationCompleted == null))
            {
                this.GetInstrumentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstrumentListOperationCompleted);
            }
            this.InvokeAsync("GetInstrumentList", new object[] {
                    instrumentName,
                    specification,
                    serialNo,
                    accessToKen}, this.GetInstrumentListOperationCompleted, userState);
        }

        private void OnGetInstrumentListOperationCompleted(object arg)
        {
            if ((this.GetInstrumentListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstrumentListCompleted(this, new GetInstrumentListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/InstrumentCheck", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string InstrumentCheck([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string operatorJobNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("InstrumentCheck", new object[] {
                    barCode,
                    operatorJobNo,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstrumentCheck(string barCode, string operatorJobNo, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstrumentCheck", new object[] {
                    barCode,
                    operatorJobNo,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndInstrumentCheck(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void InstrumentCheckAsync(string barCode, string operatorJobNo, string accessToKen)
        {
            this.InstrumentCheckAsync(barCode, operatorJobNo, accessToKen, null);
        }

        /// <remarks/>
        public void InstrumentCheckAsync(string barCode, string operatorJobNo, string accessToKen, object userState)
        {
            if ((this.InstrumentCheckOperationCompleted == null))
            {
                this.InstrumentCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstrumentCheckOperationCompleted);
            }
            this.InvokeAsync("InstrumentCheck", new object[] {
                    barCode,
                    operatorJobNo,
                    accessToKen}, this.InstrumentCheckOperationCompleted, userState);
        }

        private void OnInstrumentCheckOperationCompleted(object arg)
        {
            if ((this.InstrumentCheckCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstrumentCheckCompleted(this, new InstrumentCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/AddInstrument", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AddInstrument([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string instrumentName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sOperator, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string specification, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string manufacturer, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string serialNo, int planId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool planIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("AddInstrument", new object[] {
                    instrumentName,
                    sOperator,
                    specification,
                    manufacturer,
                    serialNo,
                    planId,
                    planIdSpecified,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddInstrument(string instrumentName, string sOperator, string specification, string manufacturer, string serialNo, int planId, bool planIdSpecified, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddInstrument", new object[] {
                    instrumentName,
                    sOperator,
                    specification,
                    manufacturer,
                    serialNo,
                    planId,
                    planIdSpecified,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddInstrument(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddInstrumentAsync(string instrumentName, string sOperator, string specification, string manufacturer, string serialNo, int planId, bool planIdSpecified, string accessToKen)
        {
            this.AddInstrumentAsync(instrumentName, sOperator, specification, manufacturer, serialNo, planId, planIdSpecified, accessToKen, null);
        }

        /// <remarks/>
        public void AddInstrumentAsync(string instrumentName, string sOperator, string specification, string manufacturer, string serialNo, int planId, bool planIdSpecified, string accessToKen, object userState)
        {
            if ((this.AddInstrumentOperationCompleted == null))
            {
                this.AddInstrumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInstrumentOperationCompleted);
            }
            this.InvokeAsync("AddInstrument", new object[] {
                    instrumentName,
                    sOperator,
                    specification,
                    manufacturer,
                    serialNo,
                    planId,
                    planIdSpecified,
                    accessToKen}, this.AddInstrumentOperationCompleted, userState);
        }

        private void OnAddInstrumentOperationCompleted(object arg)
        {
            if ((this.AddInstrumentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInstrumentCompleted(this, new AddInstrumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetCirculationRecordList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCirculationRecordList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetCirculationRecordList", new object[] {
                    barCode,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCirculationRecordList(string barCode, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCirculationRecordList", new object[] {
                    barCode,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCirculationRecordList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCirculationRecordListAsync(string barCode, string accessToKen)
        {
            this.GetCirculationRecordListAsync(barCode, accessToKen, null);
        }

        /// <remarks/>
        public void GetCirculationRecordListAsync(string barCode, string accessToKen, object userState)
        {
            if ((this.GetCirculationRecordListOperationCompleted == null))
            {
                this.GetCirculationRecordListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCirculationRecordListOperationCompleted);
            }
            this.InvokeAsync("GetCirculationRecordList", new object[] {
                    barCode,
                    accessToKen}, this.GetCirculationRecordListOperationCompleted, userState);
        }

        private void OnGetCirculationRecordListOperationCompleted(object arg)
        {
            if ((this.GetCirculationRecordListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCirculationRecordListCompleted(this, new GetCirculationRecordListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/AddCirculationRecord", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AddCirculationRecord([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sOperator, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string currentPosition, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string reason, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("AddCirculationRecord", new object[] {
                    barCode,
                    sOperator,
                    currentPosition,
                    reason,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAddCirculationRecord(string barCode, string sOperator, string currentPosition, string reason, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AddCirculationRecord", new object[] {
                    barCode,
                    sOperator,
                    currentPosition,
                    reason,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndAddCirculationRecord(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void AddCirculationRecordAsync(string barCode, string sOperator, string currentPosition, string reason, string accessToKen)
        {
            this.AddCirculationRecordAsync(barCode, sOperator, currentPosition, reason, accessToKen, null);
        }

        /// <remarks/>
        public void AddCirculationRecordAsync(string barCode, string sOperator, string currentPosition, string reason, string accessToKen, object userState)
        {
            if ((this.AddCirculationRecordOperationCompleted == null))
            {
                this.AddCirculationRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCirculationRecordOperationCompleted);
            }
            this.InvokeAsync("AddCirculationRecord", new object[] {
                    barCode,
                    sOperator,
                    currentPosition,
                    reason,
                    accessToKen}, this.AddCirculationRecordOperationCompleted, userState);
        }

        private void OnAddCirculationRecordOperationCompleted(object arg)
        {
            if ((this.AddCirculationRecordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCirculationRecordCompleted(this, new AddCirculationRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetCheckingPlanBaseInfoList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCheckingPlanBaseInfoList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string jobNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetCheckingPlanBaseInfoList", new object[] {
                    jobNo,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCheckingPlanBaseInfoList(string jobNo, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCheckingPlanBaseInfoList", new object[] {
                    jobNo,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCheckingPlanBaseInfoList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCheckingPlanBaseInfoListAsync(string jobNo, string accessToKen)
        {
            this.GetCheckingPlanBaseInfoListAsync(jobNo, accessToKen, null);
        }

        /// <remarks/>
        public void GetCheckingPlanBaseInfoListAsync(string jobNo, string accessToKen, object userState)
        {
            if ((this.GetCheckingPlanBaseInfoListOperationCompleted == null))
            {
                this.GetCheckingPlanBaseInfoListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCheckingPlanBaseInfoListOperationCompleted);
            }
            this.InvokeAsync("GetCheckingPlanBaseInfoList", new object[] {
                    jobNo,
                    accessToKen}, this.GetCheckingPlanBaseInfoListOperationCompleted, userState);
        }

        private void OnGetCheckingPlanBaseInfoListOperationCompleted(object arg)
        {
            if ((this.GetCheckingPlanBaseInfoListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCheckingPlanBaseInfoListCompleted(this, new GetCheckingPlanBaseInfoListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetPlanLsit", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetPlanLsit([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string jobNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetPlanLsit", new object[] {
                    jobNo,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPlanLsit(string jobNo, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPlanLsit", new object[] {
                    jobNo,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetPlanLsit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetPlanLsitAsync(string jobNo, string accessToKen)
        {
            this.GetPlanLsitAsync(jobNo, accessToKen, null);
        }

        /// <remarks/>
        public void GetPlanLsitAsync(string jobNo, string accessToKen, object userState)
        {
            if ((this.GetPlanLsitOperationCompleted == null))
            {
                this.GetPlanLsitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlanLsitOperationCompleted);
            }
            this.InvokeAsync("GetPlanLsit", new object[] {
                    jobNo,
                    accessToKen}, this.GetPlanLsitOperationCompleted, userState);
        }

        private void OnGetPlanLsitOperationCompleted(object arg)
        {
            if ((this.GetPlanLsitCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlanLsitCompleted(this, new GetPlanLsitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetCetificationList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetCetificationList([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string barCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetCetificationList", new object[] {
                    barCode,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCetificationList(string barCode, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCetificationList", new object[] {
                    barCode,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetCetificationList(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetCetificationListAsync(string barCode, string accessToKen)
        {
            this.GetCetificationListAsync(barCode, accessToKen, null);
        }

        /// <remarks/>
        public void GetCetificationListAsync(string barCode, string accessToKen, object userState)
        {
            if ((this.GetCetificationListOperationCompleted == null))
            {
                this.GetCetificationListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCetificationListOperationCompleted);
            }
            this.InvokeAsync("GetCetificationList", new object[] {
                    barCode,
                    accessToKen}, this.GetCetificationListOperationCompleted, userState);
        }

        private void OnGetCetificationListOperationCompleted(object arg)
        {
            if ((this.GetCetificationListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCetificationListCompleted(this, new GetCetificationListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/SendOrder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SendOrder([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string instrumentIds, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string BelongDepart, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string UserName, int UserId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool UserIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("SendOrder", new object[] {
                    instrumentIds,
                    orderJson,
                    BelongDepart,
                    UserName,
                    UserId,
                    UserIdSpecified,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSendOrder(string instrumentIds, string orderJson, string BelongDepart, string UserName, int UserId, bool UserIdSpecified, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SendOrder", new object[] {
                    instrumentIds,
                    orderJson,
                    BelongDepart,
                    UserName,
                    UserId,
                    UserIdSpecified,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSendOrder(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SendOrderAsync(string instrumentIds, string orderJson, string BelongDepart, string UserName, int UserId, bool UserIdSpecified, string accessToKen)
        {
            this.SendOrderAsync(instrumentIds, orderJson, BelongDepart, UserName, UserId, UserIdSpecified, accessToKen, null);
        }

        /// <remarks/>
        public void SendOrderAsync(string instrumentIds, string orderJson, string BelongDepart, string UserName, int UserId, bool UserIdSpecified, string accessToKen, object userState)
        {
            if ((this.SendOrderOperationCompleted == null))
            {
                this.SendOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendOrderOperationCompleted);
            }
            this.InvokeAsync("SendOrder", new object[] {
                    instrumentIds,
                    orderJson,
                    BelongDepart,
                    UserName,
                    UserId,
                    UserIdSpecified,
                    accessToKen}, this.SendOrderOperationCompleted, userState);
        }

        private void OnSendOrderOperationCompleted(object arg)
        {
            if ((this.SendOrderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendOrderCompleted(this, new SendOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InstrumentWCFServices/GetInstrumentListByKeyWorks", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetInstrumentListByKeyWorks([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string keyworks, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string accessToKen)
        {
            object[] results = this.Invoke("GetInstrumentListByKeyWorks", new object[] {
                    keyworks,
                    accessToKen});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetInstrumentListByKeyWorks(string keyworks, string accessToKen, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetInstrumentListByKeyWorks", new object[] {
                    keyworks,
                    accessToKen}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetInstrumentListByKeyWorks(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetInstrumentListByKeyWorksAsync(string keyworks, string accessToKen)
        {
            this.GetInstrumentListByKeyWorksAsync(keyworks, accessToKen, null);
        }

        /// <remarks/>
        public void GetInstrumentListByKeyWorksAsync(string keyworks, string accessToKen, object userState)
        {
            if ((this.GetInstrumentListByKeyWorksOperationCompleted == null))
            {
                this.GetInstrumentListByKeyWorksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstrumentListByKeyWorksOperationCompleted);
            }
            this.InvokeAsync("GetInstrumentListByKeyWorks", new object[] {
                    keyworks,
                    accessToKen}, this.GetInstrumentListByKeyWorksOperationCompleted, userState);
        }

        private void OnGetInstrumentListByKeyWorksOperationCompleted(object arg)
        {
            if ((this.GetInstrumentListByKeyWorksCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstrumentListByKeyWorksCompleted(this, new GetInstrumentListByKeyWorksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AppLoginCompletedEventHandler(object sender, AppLoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AppLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AppLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetBaseInfoByBarCodeCompletedEventHandler(object sender, GetBaseInfoByBarCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBaseInfoByBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetBaseInfoByBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetInstrumentDetailByBarCodeCompletedEventHandler(object sender, GetInstrumentDetailByBarCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstrumentDetailByBarCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInstrumentDetailByBarCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetInstrumentListCompletedEventHandler(object sender, GetInstrumentListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstrumentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInstrumentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void InstrumentCheckCompletedEventHandler(object sender, InstrumentCheckCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstrumentCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstrumentCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddInstrumentCompletedEventHandler(object sender, AddInstrumentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInstrumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddInstrumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCirculationRecordListCompletedEventHandler(object sender, GetCirculationRecordListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCirculationRecordListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCirculationRecordListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void AddCirculationRecordCompletedEventHandler(object sender, AddCirculationRecordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCirculationRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AddCirculationRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCheckingPlanBaseInfoListCompletedEventHandler(object sender, GetCheckingPlanBaseInfoListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCheckingPlanBaseInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCheckingPlanBaseInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetPlanLsitCompletedEventHandler(object sender, GetPlanLsitCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlanLsitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPlanLsitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetCetificationListCompletedEventHandler(object sender, GetCetificationListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCetificationListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCetificationListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void SendOrderCompletedEventHandler(object sender, SendOrderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SendOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetInstrumentListByKeyWorksCompletedEventHandler(object sender, GetInstrumentListByKeyWorksCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstrumentListByKeyWorksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetInstrumentListByKeyWorksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


}