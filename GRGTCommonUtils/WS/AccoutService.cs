//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
// 
namespace GRGTCommonUtils.WS
{
    //------------------------------------------------------------------------------
    // <auto-generated>
    //     此代码由工具生成。
    //     运行时版本:4.0.30319.1022
    //
    //     对此文件的更改可能会导致不正确的行为，并且如果
    //     重新生成代码，这些更改将会丢失。
    // </auto-generated>
    //------------------------------------------------------------------------------

    using System;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Web.Services;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;

    // 
    // 此源代码由 wsdl 自动生成, Version=4.0.30319.1。
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_AccoutService", Namespace = "http://tempuri.org/")]
    public partial class AccoutService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback LoginOperationCompleted;

        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback GetOrgLeaderOperationCompleted;

        private System.Threading.SendOrPostCallback GetLeaderRelationOperationCompleted;

        /// <remarks/>
        public AccoutService()
        {
            this.Url = "http://172.18.0.50:8003/HR";
        }

        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;

        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;

        /// <remarks/>
        public event GetOrgLeaderCompletedEventHandler GetOrgLeaderCompleted;

        /// <remarks/>
        public event GetLeaderRelationCompletedEventHandler GetLeaderRelationCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccoutService/Login", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Login([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginPwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string comeFrom)
        {
            object[] results = this.Invoke("Login", new object[] {
                    loginName,
                    loginPwd,
                    comeFrom});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginLogin(string loginName, string loginPwd, string comeFrom, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Login", new object[] {
                    loginName,
                    loginPwd,
                    comeFrom}, callback, asyncState);
        }

        /// <remarks/>
        public string EndLogin(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void LoginAsync(string loginName, string loginPwd, string comeFrom)
        {
            this.LoginAsync(loginName, loginPwd, comeFrom, null);
        }

        /// <remarks/>
        public void LoginAsync(string loginName, string loginPwd, string comeFrom, object userState)
        {
            if ((this.LoginOperationCompleted == null))
            {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                    loginName,
                    loginPwd,
                    comeFrom}, this.LoginOperationCompleted, userState);
        }

        private void OnLoginOperationCompleted(object arg)
        {
            if ((this.LoginCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccoutService/ResetPassword", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ResetPassword([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string loginPwd, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string newLoginPwd)
        {
            object[] results = this.Invoke("ResetPassword", new object[] {
                    loginName,
                    loginPwd,
                    newLoginPwd});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginResetPassword(string loginName, string loginPwd, string newLoginPwd, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ResetPassword", new object[] {
                    loginName,
                    loginPwd,
                    newLoginPwd}, callback, asyncState);
        }

        /// <remarks/>
        public string EndResetPassword(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void ResetPasswordAsync(string loginName, string loginPwd, string newLoginPwd)
        {
            this.ResetPasswordAsync(loginName, loginPwd, newLoginPwd, null);
        }

        /// <remarks/>
        public void ResetPasswordAsync(string loginName, string loginPwd, string newLoginPwd, object userState)
        {
            if ((this.ResetPasswordOperationCompleted == null))
            {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                    loginName,
                    loginPwd,
                    newLoginPwd}, this.ResetPasswordOperationCompleted, userState);
        }

        private void OnResetPasswordOperationCompleted(object arg)
        {
            if ((this.ResetPasswordCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccoutService/GetOrgLeader", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetOrgLeader([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orgCode)
        {
            object[] results = this.Invoke("GetOrgLeader", new object[] {
                    orgCode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetOrgLeader(string orgCode, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetOrgLeader", new object[] {
                    orgCode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetOrgLeader(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetOrgLeaderAsync(string orgCode)
        {
            this.GetOrgLeaderAsync(orgCode, null);
        }

        /// <remarks/>
        public void GetOrgLeaderAsync(string orgCode, object userState)
        {
            if ((this.GetOrgLeaderOperationCompleted == null))
            {
                this.GetOrgLeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrgLeaderOperationCompleted);
            }
            this.InvokeAsync("GetOrgLeader", new object[] {
                    orgCode}, this.GetOrgLeaderOperationCompleted, userState);
        }

        private void OnGetOrgLeaderOperationCompleted(object arg)
        {
            if ((this.GetOrgLeaderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrgLeaderCompleted(this, new GetOrgLeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AccoutService/GetLeaderRelation", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string GetLeaderRelation([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string jobNo)
        {
            object[] results = this.Invoke("GetLeaderRelation", new object[] {
                    jobNo});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetLeaderRelation(string jobNo, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetLeaderRelation", new object[] {
                    jobNo}, callback, asyncState);
        }

        /// <remarks/>
        public string EndGetLeaderRelation(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetLeaderRelationAsync(string jobNo)
        {
            this.GetLeaderRelationAsync(jobNo, null);
        }

        /// <remarks/>
        public void GetLeaderRelationAsync(string jobNo, object userState)
        {
            if ((this.GetLeaderRelationOperationCompleted == null))
            {
                this.GetLeaderRelationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLeaderRelationOperationCompleted);
            }
            this.InvokeAsync("GetLeaderRelation", new object[] {
                    jobNo}, this.GetLeaderRelationOperationCompleted, userState);
        }

        private void OnGetLeaderRelationOperationCompleted(object arg)
        {
            if ((this.GetLeaderRelationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLeaderRelationCompleted(this, new GetLeaderRelationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetOrgLeaderCompletedEventHandler(object sender, GetOrgLeaderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrgLeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetOrgLeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    public delegate void GetLeaderRelationCompletedEventHandler(object sender, GetLeaderRelationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLeaderRelationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLeaderRelationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }


}
